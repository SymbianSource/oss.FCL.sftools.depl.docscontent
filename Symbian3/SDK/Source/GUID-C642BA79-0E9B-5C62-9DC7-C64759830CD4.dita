<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-C642BA79-0E9B-5C62-9DC7-C64759830CD4" xml:lang="en"><title>Dynamic
buffers versus descriptors, arrays and heap cells</title><shortdesc>Explains the difference between various types of buffers.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>The essential difference between dynamic buffers and more straightforward
means of storing binary data is that C arrays and descriptors provide essentially
non-extensible buffers. Any attempt to write beyond the end of a C array results
in undefined (and usually disastrous) consequences. Any attempt to write beyond
the end of a descriptor results in a panic.</p>
<p>Heap cells may be extended, but not without limit; it may be impossible
to extend a heap cell further, because the heap is exhausted, or too fragmented
to permit the extension. In addition, if heap cell re-allocation results in
movement of the cell, re-allocation can be unduly expensive. If re-allocation
is undesirable, then a buffer could be extended by allocating a new segment
in a new allocation cell. Segmented buffers have this behaviour: flat buffers
use re-allocation alone.</p>
</conbody></concept>