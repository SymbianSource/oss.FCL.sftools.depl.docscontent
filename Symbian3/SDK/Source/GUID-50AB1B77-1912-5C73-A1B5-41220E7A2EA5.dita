<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-50AB1B77-1912-5C73-A1B5-41220E7A2EA5"><title>Store map as repository for Swizzles and associated stream IDs</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>A store map is a table of entries where each entry consists of a Swizzle and a stream ID.</p> <p>When the in-memory object represented by a Swizzle is externalised, the resulting stream ID and the associated Swizzle can be added to a store map. The effect is to create an entry in the store map table containing the stream ID and the associated Swizzle; the Swizzle is said to be bound to the stream ID. Creating this entry in the store map is done using <codeph>CStoreMap::BindL()</codeph>.</p> <p>For a container type class <codeph>CCompound</codeph>, the diagram below shows the result of:</p> <ul><li id="GUID-B49D7824-7128-506F-B026-A6F4785C5C94"><p>streaming out the in-memory objects represented by the Swizzles <codeph>iA</codeph>, <codeph>iB</codeph> and <codeph>iC</codeph>.</p> </li> <li id="GUID-F3352249-7B90-5F90-B706-A01DC2C87C41"><p>binding the swizzles with the resulting stream IDs</p> </li> </ul> <p>The other characteristics of a store map follow from this. </p> <fig id="GUID-16CAA671-B195-558E-868A-46463EDEB476"><title/><image href="GUID-4028CDCF-D2E8-5668-A751-A7CFA86CED46_d0e337428_href.png" placement="inline"/></fig> <p>Entries in the store map can be deleted. An entry can be identified either by Swizzle or by stream ID. <codeph>CStoreMap::Unbind()</codeph> deletes an entry identified by Swizzle; <codeph>CStoreMap::Forget()</codeph> deletes an entry identified by stream ID.</p> </conbody></concept>