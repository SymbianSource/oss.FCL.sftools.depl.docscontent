<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-54EB6658-D2C1-514B-B9F1-BAB541A2972D"><title>Bitmap Devices and Contexts</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>The BitGDI API provides extensions for bitmap devices of the abstract drawing device and context interfaces defined in the GDI API. The key interfaces defined by it, used for drawing on the screen, are in fact abstract. The Window Server provides concrete classes for on-screen drawing which derive from these interfaces. The concrete device and context classes that the API does provide are normally only used by applications to draw to in-memory bitmaps. </p> <section><title>Bitmap graphics context</title> <p> <xref href="GUID-FC746873-0570-3900-AD89-42B205FDC0D3.dita"><apiname>CBitmapContext</apiname></xref> specializes a GDI context (<xref href="GUID-DAD09DCF-3123-38B4-99E9-91FB24B92138.dita"><apiname>CGraphicsContext</apiname></xref>) for bitmap graphics. It provides extra functionality for: </p> <ul><li id="GUID-CA567C8D-75A2-5541-AB6D-44B3FA2829CF"><p>clearing and copying rectangular areas </p> </li> <li id="GUID-79354D71-D97C-5DB6-89B1-25DCC7D6B9A6"><p>bitmap block transfer </p> </li> <li id="GUID-07452A62-0F2A-54BF-AEC2-D7A27143B917"><p>setting pen color to a grey level </p> </li> <li id="GUID-2F47B9C7-57B4-5B21-9A57-1553D1515819"><p>setting the shadow mode </p> </li> <li id="GUID-10B7AF69-1D9D-557C-95BF-BE619E524C73"><p>resetting the GC settings to their default values </p> </li> </ul> <p>The Window Server client-side API provides one implementation, <xref href="GUID-0AEE5955-C530-35F1-A904-69183331B294.dita"><apiname>CWindowGc</apiname></xref>, used for screen drawing. Another implementation, <xref href="GUID-4A501086-7EFF-376D-8901-6D9B2EB4EFF2.dita"><apiname>CFbsBitGc</apiname></xref>, is used for drawing to in-memory bitmaps. </p> <fig id="GUID-BD3D2320-242C-5319-8AF2-358001AC0D71"><image href="GUID-E56D30B2-9EF7-555C-8119-9F5E0F959AB4_d0e180021_href.png" placement="inline"/></fig> </section> <section><title>Bitmap graphics device</title> <p> <codeph>CBitmapDevice</codeph> specializes a graphics device (<xref href="GUID-500FC564-35E9-3B66-A0C2-1269371A2EA0.dita"><apiname>CGraphicsDevice</apiname></xref>) for bitmap graphics. </p> <p>The Window Server client-side API provides one implementation, <xref href="GUID-30479BE3-296E-3B4D-914D-B080ABD733E4.dita"><apiname>CWsScreenDevice</apiname></xref>, for screen drawing. Another implementation, <xref href="GUID-71D27EBD-26B8-3D51-9798-1EAD461BCBCF.dita"><apiname>CFbsBitmapDevice</apiname></xref>, is used for drawing to in-memory bitmaps. A third, <xref href="GUID-B229156F-2344-3F46-8542-AC65882D80DE.dita"><apiname>CFbsScreenDevice</apiname></xref>, is used (rarely) to access the screen directly, without the mediation of the window server. </p> <fig id="GUID-79B68A26-59CC-5915-AB2D-90338FBF1E9B"><image href="GUID-DE0E5230-A422-5859-A8DF-5E51AAA9B23A_d0e180054_href.png" placement="inline"/></fig> </section> <section><title>Screen driver information</title> <p>The screen width and height must be a multiple of four. In certain cases where the screen mode would result in a scanline (the scanline runs in the current horizontal direction of the screen) not being divisible by a whole word (32 bits) the screen width must also be a multiple of 16. This restriction will also apply to the height if there is a screen-size mode with a rotation of 90 or 270 (or both) </p> <p>For example, the screen mode <codeph>EGray4</codeph> is 2 bits per pixel, therefore one word would be 16 pixels, so in order for the scanline to be a whole number of words the width must be a multiple of 16. </p> <p>The vertical height is unrestricted unless there is at least one screen-size mode with a rotation of 90 or 270 (or both). </p> </section> </conbody><related-links><link href="GUID-75B0B7C7-37B7-57D1-8EAA-8303A915A9DD.dita"><linktext>Bitmaps</linktext> </link> <link href="GUID-EAAD1719-C02C-5705-A5C3-993E36441BE6.dita"><linktext>BitGDI Component</linktext> </link> </related-links></concept>