<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-626D2500-7E0E-5A93-9202-03C13EA8C0C7" xml:lang="en"><title>Category:
E32USER-CBase</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Panics with this category are raised in user side code by member functions
of <codeph>CBase</codeph> derived classes that reside in the <filepath>euser.dll</filepath> file.
Typically, they are caused by passing bad or contradictory values to class
constructors or member functions. </p>
<p>The thread causing the panic is terminated. </p>
<table id="GUID-7FE7A949-7ED1-53D1-B73A-FE15766EB777">
<tgroup cols="2"><colspec colname="col0"/><colspec colname="col1"/>
<tbody>
<row>
<entry><p> <codeph>1</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-B469B031-B138-3D92-B5AB-0E043447F932.dita#GUID-B469B031-B138-3D92-B5AB-0E043447F932/GUID-3E4CEED6-014F-38E4-A7B4-DDE0158362F4"><apiname>CAsyncCallBack::Set()</apiname></xref> function,
if this active object is already active when the function is called. </p> </entry>
</row>
<row>
<entry><p> <codeph>2</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by the <xref href="GUID-619AF4A9-4DAF-3FA4-A704-717DB30B5389.dita#GUID-619AF4A9-4DAF-3FA4-A704-717DB30B5389/GUID-A7955FDB-B030-392F-B5D8-13F7EEDF4337"><apiname>CAsyncOneShot::Call()</apiname></xref> function,
if the active object has not already been added to the active scheduler. </p> </entry>
</row>
<row>
<entry><p> <codeph>3</codeph>  </p> </entry>
<entry><p>This panic is raised during construction of a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) when the value of the granularity passed to
the constructors is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>4</codeph>  </p> </entry>
<entry><p>This panic is raised when reading from a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>Read()</codeph> member function.
It is caused by attempting to read beyond the end of the buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>5</codeph>  </p> </entry>
<entry><p>This panic is raised when writing to a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>Write()</codeph> member function.
It is caused by attempting to write beyond the end of the buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>6</codeph>  </p> </entry>
<entry><p>This panic is raised when reading from a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>Read()</codeph> member function.
It is caused by specifying a negative length for the amount of data to be
read </p> </entry>
</row>
<row>
<entry><p> <codeph>7</codeph>  </p> </entry>
<entry><p>This panic is raised when writing to a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>Write()</codeph> member function.
It is caused by specifying a negative length for the amount of data to be
written. </p> </entry>
</row>
<row>
<entry><p> <codeph>8</codeph>  </p> </entry>
<entry><p>This panic is raised when inserting data into a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>InsertL()</codeph> member
function or when inserting an uninitialized region into the dynamic buffer
using the <codeph>ExpandL()</codeph> member function. It is caused by passing
a negative length value to these functions. </p> </entry>
</row>
<row>
<entry><p> <codeph>9</codeph>  </p> </entry>
<entry><p>This panic is raised when inserting data into a dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> or
a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>) using the <codeph>InsertL()</codeph> member
function. It is caused when the variant of <codeph>InsertL()</codeph> which
takes a pointer to <codeph>TAny</codeph>, is passed a NULL pointer value. </p> </entry>
</row>
<row>
<entry><p> <codeph>10</codeph>  </p> </entry>
<entry><p>This panic is raised when specifying the minimum amount of space
which a flat dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref>) should occupy
using the <codeph>SetReserveL()</codeph> member function. It is caused when
the size value passed to the function is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>11</codeph>  </p> </entry>
<entry><p>This panic is raised when specifying the minimum amount of space
which a flat dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref>) should occupy
using the <codeph>SetReserveL()</codeph> member function. It is caused when
the size value passed to the function is less than the current size of the
buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>12</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Delete()</codeph>, <codeph>Ptr()</codeph>, <codeph>BackPtr()</codeph> member
functions of a flat dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> ) ; the
panic can also be raised by <codeph>InsertL()</codeph> and <codeph>ExpandL()</codeph>.
It is caused when the position value passed to these functions is either negative
or represents a position beyond the end of the current buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>13</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Delete()</codeph> member function
of a flat dynamic buffer (a <xref href="GUID-F915EF7D-7C06-3902-AB84-C8E89ABE7F18.dita"><apiname>CBufFlat</apiname></xref> ) . It is caused when
the combination of position and length values passed to the function implies
an attempt to delete data beyond the end of the flat buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>14</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Delete()</codeph>, <codeph>Ptr()</codeph>, <codeph>BackPtr()</codeph> member
functions of a segmented dynamic buffer (a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref> ) ;
the panic can also be raised by <codeph>InsertL()</codeph> and <codeph>ExpandL()</codeph>.
It is caused when the position value passed to these functions is either negative
or represents a position beyond the end of the current buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>15</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Delete()</codeph> member function
of a segmented dynamic buffer (a <xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref> ) . It is caused
when the combination of position and length values passed to the function
implies an attempt to delete data beyond the end of the segmented buffer. </p> </entry>
</row>
<row>
<entry><p> <codeph>16</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by the <codeph>InsertL()</codeph>, <codeph>Delete()</codeph>, <codeph>Ptr()</codeph> and <codeph>BackPtr()</codeph> member
functions as implemented for segmented buffers (<xref href="GUID-74CD841C-49EE-3512-9C05-2A05924A63A7.dita"><apiname>CBufSeg</apiname></xref>)
, when the offset within a segment, where data is to be inserted or removed,
is greater than the buffer granularity. </p> </entry>
</row>
<row>
<entry><p> <codeph>17</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructors of arrays of fixed length
objects as represented, for example, by the classes <xref href="GUID-12C65B99-553E-35CA-B36F-2F77BFC972B3.dita"><apiname>CArrayFixFlat</apiname></xref>, <xref href="GUID-EE7C55C7-9CB2-3EE8-869C-8283B6723D5C.dita"><apiname>CArrayFixSeg</apiname></xref> and <xref href="GUID-E9669326-3E63-3E66-BC99-F6BF08F26BA4.dita"><apiname>CArrayFixFlat&lt;TAny&gt;</apiname></xref>. It is caused when the record length is either negative or zero. </p> <p>The
record length is either explicitly specified as in the case of the <xref href="GUID-E9669326-3E63-3E66-BC99-F6BF08F26BA4.dita"><apiname>CArrayFixFlat&lt;TAny&gt;</apiname></xref> class
or is implied by the length of the template class as in the case of the <xref href="GUID-12C65B99-553E-35CA-B36F-2F77BFC972B3.dita"><apiname>CArrayFixFlat</apiname></xref> class. </p> </entry>
</row>
<row>
<entry><p> <codeph>18</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructors of arrays of fixed length
objects as represented, for example, by the classes: <xref href="GUID-12C65B99-553E-35CA-B36F-2F77BFC972B3.dita"><apiname>CArrayFixFlat</apiname></xref> and <xref href="GUID-EE7C55C7-9CB2-3EE8-869C-8283B6723D5C.dita"><apiname>CArrayFixSeg</apiname></xref>.
It is caused when the granularity passed to the constructors is either negative
or zero. </p> </entry>
</row>
<row>
<entry><p> <codeph>19</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructors of arrays of variable length
objects as represented, for example, by the classes: <xref href="GUID-5BC7EAFE-FC9C-3E86-BFDC-FDE9FE086D53.dita"><apiname>CArrayVarFlat</apiname></xref> and <xref href="GUID-35439B46-B078-3B9F-9199-CC8F8DD4C1DB.dita"><apiname>CArrayVarSeg</apiname></xref>.
It is caused when the granularity passed to the constructors is either negative
or zero. </p> </entry>
</row>
<row>
<entry><p> <codeph>20</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructors of packed arrays as represented,
for example, by the class <xref href="GUID-4D6E6B46-32B5-34AD-BD8A-84BF6B2B7C81.dita"><apiname>CArrayPakFlat</apiname></xref>. It is caused when
the granularity passed to the constructors is either negative or zero. </p> </entry>
</row>
<row>
<entry><p> <codeph>21</codeph>  </p> </entry>
<entry><p>This panic is raised by any operation which accesses an element
of an array by explicit reference to an index number, for example, the <codeph>Delete()</codeph>, <codeph>InsertL()</codeph> and <codeph>At()</codeph> member functions or the operator <codeph>Operator[]</codeph>. It is caused
by specifying an index value which is either negative or is greater than or
equal to the number of objects currently within the array. </p> </entry>
</row>
<row>
<entry><p> <codeph>22</codeph>  </p> </entry>
<entry><p>This panic is raised when deleting contiguous elements from an array
of fixed length objects (derived from <xref href="GUID-B0159EFA-B76E-3C59-8B35-42CC93DAF0FF.dita"><apiname>CArrayFixBase</apiname></xref>) using
the <codeph>Delete()</codeph> member function. It is caused by specifying
the number of contiguous elements as a zero or negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>23</codeph>  </p> </entry>
<entry><p>This panic is raised when inserting contiguous elements into an
array of fixed length objects (derived from <xref href="GUID-B0159EFA-B76E-3C59-8B35-42CC93DAF0FF.dita"><apiname>CArrayFixBase</apiname></xref>)
using the <codeph>InsertL()</codeph> member function. It is caused by specifying
the number of contiguous elements as a zero or negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>24</codeph>  </p> </entry>
<entry><p>This panic is raised when resizing an array of fixed length objects
(derived from <xref href="GUID-B0159EFA-B76E-3C59-8B35-42CC93DAF0FF.dita"><apiname>CArrayFixBase</apiname></xref>) using the <codeph>ResizeL()</codeph> member
function. It is caused by specifying the number of contiguous elements as
a zero or negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>25</codeph>  </p> </entry>
<entry><p>This panic is raised when deleting contiguous elements from an array
of variable length objects (derived from <xref href="GUID-1BA1D5FF-BE4A-3EA5-9784-ADEA1B81EF39.dita"><apiname>CArrayVarBase</apiname></xref>)
using the <codeph>Delete()</codeph> member function. It is caused by specifying
the number of contiguous elements as a zero or negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>26</codeph>  </p> </entry>
<entry><p>This panic is raised when deleting contiguous elements from a packed
array (derived from <xref href="GUID-800D79F0-D735-3AC5-BDFD-F1E7B8C37B99.dita"><apiname>CArrayPakBase</apiname></xref>) using the <codeph>Delete()</codeph> member
function. It is caused by specifying the number of contiguous elements as
a zero or negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>27</codeph>  </p> </entry>
<entry><p>This panic is raised when reserving space in flat arrays of fixed
length objects, (the <xref href="GUID-12C65B99-553E-35CA-B36F-2F77BFC972B3.dita"><apiname>CArrayFixFlat</apiname></xref>,<xref href="GUID-E9669326-3E63-3E66-BC99-F6BF08F26BA4.dita"><apiname>CArrayFixFlat&lt;TAny&gt;</apiname></xref> and <xref href="GUID-FCE7D958-96AA-346D-8D22-0EF24B9DB7CC.dita"><apiname>CArrayPtrFlat</apiname></xref> classes
) using the <codeph>SetReserveL()</codeph> member function. It is caused by
specifying the number of elements, for which space is to be reserved, as less
than the current number of elements in the array. </p> </entry>
</row>
<row>
<entry><p> <codeph>28</codeph>  </p> </entry>
<entry><p>This panic is raised when inserting or appending replicated elements
to the arrays of fixed length objects <xref href="GUID-12C65B99-553E-35CA-B36F-2F77BFC972B3.dita"><apiname>CArrayFixFlat</apiname></xref> and <xref href="GUID-EE7C55C7-9CB2-3EE8-869C-8283B6723D5C.dita"><apiname>CArrayFixSeg</apiname></xref> using
the <codeph>InsertL()</codeph> or <codeph>AppendL()</codeph> functions. It
is caused by specifying the number of replicas as negative or zero. </p> </entry>
</row>
<row>
<entry><p> <codeph>29</codeph>  </p> </entry>
<entry><p>This panic is raised when deleting elements from a fixed length,
variable length or packed array (derived from <xref href="GUID-B0159EFA-B76E-3C59-8B35-42CC93DAF0FF.dita"><apiname>CArrayFixBase</apiname></xref>, <xref href="GUID-1BA1D5FF-BE4A-3EA5-9784-ADEA1B81EF39.dita"><apiname>CArrayVarBase</apiname></xref> and <xref href="GUID-800D79F0-D735-3AC5-BDFD-F1E7B8C37B99.dita"><apiname>CArrayPakBase</apiname></xref>) using the <codeph>Delete()</codeph> function. It is caused when the specification
of the position of the first element to be deleted and the number of contiguous
elements to be deleted refers to elements which are outside the bounds of
the array. </p> </entry>
</row>
<row>
<entry><p> <codeph>30</codeph>  </p> </entry>
<entry><p>This panic is raised when inserting into, appending onto, expanding
or extending a variable length array or a packed array (i.e. arrays derived
from <xref href="GUID-C2430ABF-D276-3F70-A18B-7059F3099BF1.dita"><apiname>CArrayVar</apiname></xref> or <xref href="GUID-899495E6-C20E-3614-A3A9-C49A7916E5E7.dita"><apiname>CArrayPak</apiname></xref>) using the <codeph>InsertL()</codeph>, <codeph>AppendL()</codeph>, <codeph>ExpandL()</codeph> or <codeph>ExtendL()</codeph> functions respectively. It is caused by specifying
the length of the element as a negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>33</codeph>  </p> </entry>
<entry><p>This panic is raised by the destructor of a <xref href="GUID-9230EF62-376A-389C-B720-7C1EDCB7EA97.dita"><apiname>CObject</apiname></xref>.
It is caused, if an attempt is made to delete the <xref href="GUID-9230EF62-376A-389C-B720-7C1EDCB7EA97.dita"><apiname>CObject</apiname></xref> when
the reference count is not zero. </p> </entry>
</row>
<row>
<entry><p> <codeph>34</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Close()</codeph> member function
of a <xref href="GUID-9230EF62-376A-389C-B720-7C1EDCB7EA97.dita"><apiname>CObject</apiname></xref>. It is caused, if the reference count is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>35</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Remove()</codeph> member function
of an object container, a <xref href="GUID-DE901A59-C714-356A-9490-C4E9C9F186DB.dita"><apiname>CObjectCon</apiname></xref>. It is caused when
the <xref href="GUID-9230EF62-376A-389C-B720-7C1EDCB7EA97.dita"><apiname>CObject</apiname></xref> to be removed from the container is not contained
by the container. </p> </entry>
</row>
<row>
<entry><p> <codeph>36</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Remove()</codeph> member function
of a container index, a <xref href="GUID-72761B3C-ECB6-34B2-87ED-C972E479357A.dita"><apiname>CObjectConIx</apiname></xref>. It is caused when
the object container, a <xref href="GUID-DE901A59-C714-356A-9490-C4E9C9F186DB.dita"><apiname>CObjectCon</apiname></xref>, to be removed from
the index is not contained by the index. </p> </entry>
</row>
<row>
<entry><p> <codeph>37</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Remove()</codeph> member function
of an object index, a <xref href="GUID-70824EE4-9E01-3AC0-9318-4B521A1FDD5E.dita"><apiname>CObjectIx</apiname></xref>. It is caused when the
handle passed to the <codeph>Remove()</codeph> function does not represent
a <xref href="GUID-9230EF62-376A-389C-B720-7C1EDCB7EA97.dita"><apiname>CObject</apiname></xref> known to the object index. </p> </entry>
</row>
<row>
<entry><p> <codeph>38</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>At()</codeph>, <codeph>FindByName()</codeph> and <codeph>FindByFullName()</codeph> member
functions of an object container, a <xref href="GUID-DE901A59-C714-356A-9490-C4E9C9F186DB.dita"><apiname>CObjectCon</apiname></xref>. It is caused
when the unique ID as derived from the handle is not the same as the unique
ID held by the object container. </p> </entry>
</row>
<row>
<entry><p> <codeph>39</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>At()</codeph> member function
of an object container, a <xref href="GUID-DE901A59-C714-356A-9490-C4E9C9F186DB.dita"><apiname>CObjectCon</apiname></xref>. It is caused when
the index represented by the handle is outside the permitted range. In effect,
the handle is bad. </p> </entry>
</row>
<row>
<entry><p> <codeph>40</codeph>  </p> </entry>
<entry><p>This panic is raised by the destructor of an active object, a <xref href="GUID-067293BF-B28C-3CEC-92F4-1351A795EA7F.dita"><apiname>CActive</apiname></xref>.
It is caused by an attempt to delete the active object while it still has
a request outstanding. </p> </entry>
</row>
<row>
<entry><p> <codeph>41</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Add()</codeph> member function
of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>. It is caused
by an attempt to add an active object to the active scheduler when it has
already been added to the active scheduler </p> </entry>
</row>
<row>
<entry><p> <codeph>42</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>SetActive()</codeph> member
function of an active object, a <xref href="GUID-067293BF-B28C-3CEC-92F4-1351A795EA7F.dita"><apiname>CActive</apiname></xref>. It is caused by
an attempt to flag the active object as active when it is already active,
i.e. a request is still outstanding. </p> </entry>
</row>
<row>
<entry><p> <codeph>43</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Install()</codeph> member function
of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>. It is caused
by attempting to install this active scheduler as the current active scheduler
when there is already a current active scheduler; i.e. an active scheduler
has already been installed. </p> </entry>
</row>
<row>
<entry><p> <codeph>44</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Start()</codeph>, <codeph>Stop()</codeph> and <codeph>Add()</codeph> member
functions of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>. It
is raised when the thread has no attached active scheduler </p> </entry>
</row>
<row>
<entry><p> <codeph>45</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Stop()</codeph> member function
of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>. Calling <codeph>Stop()</codeph> terminates
the wait loop started by the most recent call to <codeph>Start()</codeph>.
The panic is caused by a call to <codeph>Stop()</codeph> which is not matched
by a corresponding call to <codeph>Start()</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>46</codeph>  </p> </entry>
<entry><p>This panic is raised by an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>.
It is caused by a stray signal. </p> </entry>
</row>
<row>
<entry><p> <codeph>47</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Error()</codeph> virtual member
function of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>. This
function is called when an active object’s <codeph>RunL()</codeph> function
leaves. Applications always replace the <codeph>Error()</codeph> function
in a class derived from <codeph>CActiveScheduler</codeph>; the default behaviour
provided by <codeph>CActiveScheduler</codeph> raises this panic. </p> </entry>
</row>
<row>
<entry><p> <codeph>48</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Add()</codeph> member function
of an active scheduler, a <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref>, when a NULL
pointer is passed to the function. </p> </entry>
</row>
<row>
<entry><p> <codeph>49</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>SetActive()</codeph> and <codeph>Deque()</codeph> member
functions of an active object, a <xref href="GUID-067293BF-B28C-3CEC-92F4-1351A795EA7F.dita"><apiname>CActive</apiname></xref>. It is raised
if the active object has not been added to the active scheduler. </p> </entry>
</row>
<row>
<entry><p> <codeph>50</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>SetPriority()</codeph> member
function of an active object, a <xref href="GUID-067293BF-B28C-3CEC-92F4-1351A795EA7F.dita"><apiname>CActive</apiname></xref>. It is caused by
an attempt to change the priority of the active object while it is active,
i.e. while a request is outstanding). </p> </entry>
</row>
<row>
<entry><p> <codeph>51</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>At()</codeph>, <codeph>After()</codeph> and <codeph>Lock()</codeph> member
functions of the <xref href="GUID-5733DF34-5B54-3044-BBED-3BFECB7ACE7A.dita"><apiname>CTimer</apiname></xref> active object. It is caused by
an attempt to request a timer event when the <codeph>CTimer</codeph> active
object has not been added to the active scheduler. </p> </entry>
</row>
<row>
<entry><p> <codeph>52</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Start()</codeph> member function
of the periodic timer active object, a <xref href="GUID-3CECC9FC-58C1-3117-AAF2-FDF88341F56F.dita"><apiname>CPeriodic</apiname></xref>, when
a negative time interval is passed to the function. </p> </entry>
</row>
<row>
<entry><p> <codeph>53</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Start()</codeph> member function
of the periodic timer active object, a <xref href="GUID-3CECC9FC-58C1-3117-AAF2-FDF88341F56F.dita"><apiname>CPeriodic</apiname></xref>, when
a negative delay time interval is passed to the function. </p> </entry>
</row>
<row>
<entry><p> <codeph>54</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>RunL()</codeph> member function
of the <xref href="GUID-D75692B1-FB2C-3893-9CF1-33BD02BBC63F.dita"><apiname>CServer</apiname></xref> active object base class responsible for
handling asynchronous requests from a client thread when the client passes
a negative function code in <xref href="GUID-41A02456-A7A6-3357-9031-A80BF7320D5E.dita"><apiname>RMessage</apiname></xref>. The only negative
values permitted are RMessage::EConnect and RMessage::EDisConnect. </p> </entry>
</row>
<row>
<entry><p> <codeph>55</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Start()</codeph> member function
of the <xref href="GUID-D75692B1-FB2C-3893-9CF1-33BD02BBC63F.dita"><apiname>CServer</apiname></xref> active object base class responsible for
handling asynchronous requests from a client thread. It is caused by the server
having no name. </p> </entry>
</row>
<row>
<entry><p> <codeph>56</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>New()</codeph> and <codeph>NewL()</codeph> member
functions of <codeph>CBitMapAllocator</codeph> when a negative or zero size
is passed to them. </p> </entry>
</row>
<row>
<entry><p> <codeph>57</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Free(TInt aPos)</codeph> member
function of <codeph>CBitMapAllocator</codeph> when a position value is passed
which is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>58</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>IsFree(TInt aPos)</codeph> member
function of <codeph>CBitMapAllocator</codeph> when a position value is passed
which is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>59</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>AllocFromTopFrom(TInt      
          aPos)</codeph> member function of <codeph>CBitMapAllocator</codeph> when
a position value is passed which is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>62</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>AllocAt()</codeph> member function
of <codeph>CBitMapAllocator</codeph> when the implied position has already
been allocated. </p> </entry>
</row>
<row>
<entry><p> <codeph>63</codeph>  </p> </entry>
<entry><p>This panic is raised as a result of a call to the <codeph>Pop()</codeph> and <codeph>PopAndDestroy()</codeph> static
member functions of the <xref href="GUID-0DD554D7-B9B1-3FD3-898F-4D855144FCEA.dita"><apiname>CleanupStack</apiname></xref> class. The panic occurs
when TRAPs have been nested and an attempt is made to pop too many items from
the cleanup stack for the current nest level. </p> </entry>
</row>
<row>
<entry><p> <codeph>64</codeph>  </p> </entry>
<entry><p>This panic is raised as a result of a call to the <codeph>Pop()</codeph> and <codeph>PopAndDestroy()</codeph> static
member functions of the <xref href="GUID-0DD554D7-B9B1-3FD3-898F-4D855144FCEA.dita"><apiname>CleanupStack</apiname></xref> class. The panic occurs
when attempt is made to pop more items from the cleanup stack than are on
the cleanup stack. </p> </entry>
</row>
<row>
<entry><p> <codeph>65</codeph>  </p> </entry>
<entry><p>The panic is raised as a result of a call to the <codeph>Pop()</codeph> and <codeph>PopAndDestroy()</codeph> static
member functions of the <codeph>CleanupStack</codeph> class. The panic occurs
when an attempt is made to pop more items from the cleanup stack than are
on the cleanup stack. </p> </entry>
</row>
<row>
<entry><p> <codeph>66</codeph>  </p> </entry>
<entry><p>This panic is raised if an attempt is being made to insert a cleanup
item into a position on the cleanup stack reserved for marking the current <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> nest
level. In practice this error occurs if the call to <xref href="GUID-0DD554D7-B9B1-3FD3-898F-4D855144FCEA.dita#GUID-0DD554D7-B9B1-3FD3-898F-4D855144FCEA/GUID-91B57C35-E399-3191-AF15-D622822F32CA"><apiname>CleanupStack::PushL()</apiname></xref> happens
when there has been no call to <codeph>TRAP()</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>67</codeph>  </p> </entry>
<entry><p>This panic is raised when building a <codeph>TCleanupStackItem</codeph> which
is to be added to the cleanup stack. The building of the <codeph>TCleanupStackItem</codeph> needs
a <xref href="GUID-CD0A798E-7E42-3689-8E86-F5FD43C758FC.dita"><apiname>TCleanupItem</apiname></xref> and this has been constructed with a NULL
cleanup operation (a <xref href="GUID-804D5E7C-DABF-39CD-928E-6A053FB99D27.dita"><apiname>TCleanupOperation</apiname></xref>). </p> </entry>
</row>
<row>
<entry><p> <codeph>68</codeph>  </p> </entry>
<entry><p>This panic is raised if there are no free slots available on the
cleanup stack to insert a cleanup item </p> </entry>
</row>
<row>
<entry><p> <codeph>69</codeph>  </p> </entry>
<entry><p>This panic is raised if no trap handler has been installed. In practice,
this occurs if <xref href="GUID-17AC7BAD-1C03-3729-BCC6-F5B28B32E99D.dita"><apiname>CTrapCleanup</apiname></xref> <codeph>::New()</codeph> has
not been called before using the cleanup stack. </p> </entry>
</row>
<row>
<entry><p> <codeph>70</codeph>  </p> </entry>
<entry><p>This panic is raised as a result of a call to the versions of the <codeph>Pop()</codeph> and <codeph>PopAndDestroy()</codeph> static
member functions of the <xref href="GUID-0DD554D7-B9B1-3FD3-898F-4D855144FCEA.dita"><apiname>CleanupStack</apiname></xref> class which take an
explicit count of the items to be popped. The panic is caused by passing a
negative value for the number of items to be popped. </p> </entry>
</row>
<row>
<entry><p> <codeph>71</codeph>  </p> </entry>
<entry><p>This panic is raised when <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> s have been nested
and an attempt is made to exit from a <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> nest level before
all the cleanup items belonging to that level have been popped off the cleanup
stack. </p> <p>There must be the same number of items on the cleanup stack
on entering a <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> harness as there is on exiting. In other
words, anything that is pushed onto the cleanup stack inside a <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> harness
must be popped off before leaving the harness. </p> <p>For example, the following
code avoids this panic when <codeph>FooLC()</codeph> does not leave, by explicitly
popping <codeph>pointer</codeph> before the end of the harness: </p> <codeblock id="GUID-99CE059E-BE03-59C2-840E-B69E0A4EFA62" xml:space="preserve">TRAPD(error, pointer = FooLC(); CleanupStack::Pop(pointer));</codeblock> <p>See
also <xref href="GUID-3AD20E0C-F364-533F-9FBC-227478CA9982.dita">How to use TRAP</xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>72</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the circular buffer base
class, a <xref href="GUID-FA17C8AD-BF8C-3FD4-98AE-43AF55A9D318.dita"><apiname>CCirBufBase</apiname></xref>, when the size value passed is zero
or negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>73</codeph>  </p> </entry>
<entry><p>This panic is raised by a call to the <codeph>SetLengthL()</codeph> member
function of of the circular buffer base class, a <xref href="GUID-FA17C8AD-BF8C-3FD4-98AE-43AF55A9D318.dita"><apiname>CCirBufBase</apiname></xref>,
by passing a length value which is zero or negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>74</codeph>  </p> </entry>
<entry><p>This panic is raised by a call to the <codeph>Add()</codeph> member
function of a circular buffer, a <xref href="GUID-1D73835F-4361-3216-8EFC-669364E3F5E7.dita"><apiname>CCirBuf</apiname></xref> when the pointer
to the item to be added is NULL. </p> </entry>
</row>
<row>
<entry><p> <codeph>75</codeph>  </p> </entry>
<entry><p>This panic is raised by a call to the <codeph>Add()</codeph> member
function of a circular buffer, a <xref href="GUID-1D73835F-4361-3216-8EFC-669364E3F5E7.dita"><apiname>CCirBuf</apiname></xref> when the number
of items to be added is zero or negative </p> </entry>
</row>
<row>
<entry><p> <codeph>76</codeph>  </p> </entry>
<entry><p>This panic is raised by a call to the <codeph>Remove()</codeph> member
function of a circular buffer, a <xref href="GUID-1D73835F-4361-3216-8EFC-669364E3F5E7.dita"><apiname>CCirBuf</apiname></xref> when the number
of items to be removed is zero or negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>89</codeph>  </p> </entry>
<entry><p>Introduced in 6.0: This panic is raised by call to the <codeph>Replace()</codeph> member
function of <xref href="GUID-B4C76104-EA1B-3FC3-A31E-86A976598171.dita"><apiname>CActiveScheduler</apiname></xref> when the replacement active
scheduler is the same as the existing active scheduler. </p> </entry>
</row>
<row>
<entry><p> <codeph>90</codeph>  </p> </entry>
<entry><p>Introduced in 6.0: The panic is raised as a result of a call to
the <codeph>Pop()</codeph> and <codeph>PopAndDestroy()</codeph> static member
functions of the <codeph>CleanupStack</codeph> class. The panic occurs when
an the item to be popped is not the expected item. </p> </entry>
</row>
<row>
<entry><p> <codeph>91</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3.dita#GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3/GUID-F1EDF50B-E91B-3141-9CE1-F76458A97022"><apiname>CActiveSchedulerWait::Start()</apiname></xref> when
the <xref href="GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3.dita"><apiname>CActiveSchedulerWait</apiname></xref> object has already been started. </p> </entry>
</row>
<row>
<entry><p> <codeph>92</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3.dita#GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3/GUID-57ED10CA-FAD8-3060-AAF8-19D0EB75C65F"><apiname>CActiveSchedulerWait::AsyncStop()</apiname></xref> and <xref href="GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3.dita#GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3/GUID-FFD199F4-C703-3645-8948-C1DEC39049F3"><apiname>CActiveSchedulerWait::CanStopNow()</apiname></xref> when
the <xref href="GUID-4F74C605-1F32-33C6-82A3-60259E6C73B3.dita"><apiname>CActiveSchedulerWait</apiname></xref> object has not been started. </p> </entry>
</row>
<row>
<entry><p> <codeph>93</codeph>  </p> </entry>
<entry><p>This panic is raised during construction of a <xref href="GUID-619AF4A9-4DAF-3FA4-A704-717DB30B5389.dita"><apiname>CAsyncOneShot</apiname></xref> if
the attempt to open a handle to the current thread fails. </p> </entry>
</row>
<row>
<entry><p> <codeph>94</codeph>  </p> </entry>
<entry><p>Not used. </p> </entry>
</row>
<row>
<entry><p> <codeph> 95 </codeph>  </p> </entry>
<entry><p>This panic is raised on calls to the default implementations of
functions: <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-49DDDDAC-B256-3B43-B059-EE369EAEA2BB"><apiname>CPolicyServer::CustomSecurityCheckL()</apiname></xref> and <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-93C9B0EE-8B94-3A95-BBA7-5B1C8BED6E28"><apiname>CPolicyServer::CustomFailureActionL()</apiname></xref>. </p> <p>The
class <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> is intended to be derived from, and
these functions in particular need to be re-implemented in a derived class.
This panic is a symptom of a failure to provide a derived class. </p> </entry>
</row>
<row>
<entry><p> <codeph>96</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the protected <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> constructor, if the
first element pointed to by the <codeph>iRanges</codeph> member of the <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita"><apiname>TPolicy</apiname></xref>  <codeph>aPolicy</codeph> parameter
does not have a value of 0; i.e. if <codeph>aPolicy</codeph>'s <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita#GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81/GUID-4F1B277E-0A81-362D-9700-2514260C49AE"><apiname>TPolicy::iRanges</apiname></xref> <codeph>[0]</codeph> is
not 0. </p> </entry>
</row>
<row>
<entry><p> <codeph>97</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the protected <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> constructor, if the
value of each element of the <codeph>iRanges</codeph> member of the <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita"><apiname>TPolicy</apiname></xref>  <codeph>aPolicy</codeph> parameter
is not greater than the value of the previous element. </p> <p>See also <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita#GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81/GUID-4F1B277E-0A81-362D-9700-2514260C49AE"><apiname>TPolicy::iRanges</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>98</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the protected <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> constructor, if the
value of every element in the <codeph>iElementsIndex</codeph> member of the <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita"><apiname>TPolicy</apiname></xref>  <codeph>aPolicy</codeph> parameter
is not valid. </p> <p>Elements of <codeph>iElementsIndex</codeph> are invalid
if their values are either: </p> <ul>
<li id="GUID-6C625EBA-BC2C-5654-B403-BE86CC5A7F08"><p>less than <codeph>ESpecialCaseHardLimit</codeph>  </p> </li>
</ul> <p>or </p> <ul>
<li id="GUID-D966E095-FBE8-5230-BA6E-333F18B26B23"><p>greater than <codeph>ESpecialCaseLimit</codeph>  </p> </li>
</ul> <p>See also <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita#GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81/GUID-CF32C06C-56D2-3EB3-A4C5-333496643EC4"><apiname>TPolicy::iElementsIndex</apiname></xref> and <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-B7556395-6CD8-364B-8F78-A491E1451096"><apiname>CPolicyServer::TSpecialCase</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>99</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the protected <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> constructor, if the
value of the <codeph>iOnConnect</codeph> member of the <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita"><apiname>TPolicy</apiname></xref>  <codeph>aPolicy</codeph> parameter
is not valid. </p> <p>The <codeph>iOnConnect</codeph> member is invalid if
its value is either: </p> <ul>
<li id="GUID-F412D905-2879-51AD-81A4-0AA02988A66D"><p>less than <codeph>ESpecialCaseHardLimit</codeph>  </p> </li>
</ul> <p>or </p> <ul>
<li id="GUID-201F2F27-E4A2-56CB-BF17-3101A8B37A5A"><p>greater than <codeph>ESpecialCaseLimit</codeph>  </p> </li>
</ul> <p>See also <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita#GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81/GUID-1673FDDF-8EFF-3AF5-8EE4-4B8C3195F3F4"><apiname>TPolicy::iOnConnect</apiname></xref> and <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-B7556395-6CD8-364B-8F78-A491E1451096"><apiname>CPolicyServer::TSpecialCase</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>100</codeph>  </p> </entry>
<entry><p>This panic is raised if <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-98256A10-3563-3643-A3C6-E258AAB133D2"><apiname>CPolicyServer::iPolicy</apiname></xref> is
found to be invalid for some unknown reason. </p> <p>If you run the server
in debug mode, it is likely that the server will panic with one of the panic
codes in the range 96 to 99 inclusive. These are described above. </p> <p>See <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> for
information about what constitutes a valid policy. </p> </entry>
</row>
<row>
<entry><p> <codeph>101</codeph>  </p> </entry>
<entry><p>This panic is raised when the value returned by the <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-49DDDDAC-B256-3B43-B059-EE369EAEA2BB"><apiname>CPolicyServer::CustomSecurityCheckL()</apiname></xref> and <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-93C9B0EE-8B94-3A95-BBA7-5B1C8BED6E28"><apiname>CPolicyServer::CustomFailureActionL()</apiname></xref> functions is invalid. </p> <p>The <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita#GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2/GUID-06A06698-B3C4-3CC7-82EF-AE41E4ACBB30"><apiname>CPolicyServer::TCustomResult</apiname></xref> enum
defines the valid set of return values. </p> </entry>
</row>
<row>
<entry><p> <codeph>102</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the protected <xref href="GUID-5BDFF5B1-DC1F-393A-879B-9D8DE080B4E2.dita"><apiname>CPolicyServer</apiname></xref> constructor, if the
value of the <codeph>iRangeCount</codeph> member of the <xref href="GUID-7BB5A749-5652-3509-90DF-4D1B8FAEAC81.dita"><apiname>TPolicy</apiname></xref>  <codeph>aPolicy</codeph> parameter
is not greater than 0. A value of 0 implies that no policies have been passed
to the policy server. It is a requirement that at least one policy be passed
to the policy server. </p> </entry>
</row>
<row>
<entry><p> <codeph>103</codeph>  </p> </entry>
<entry><p>This panic is raised by the policy server framework if a message
fails a policy check, whether custom or not. </p> </entry>
</row>
<row>
<entry><p> <codeph>104</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by a number of <xref href="GUID-70824EE4-9E01-3AC0-9318-4B521A1FDD5E.dita"><apiname>CObjectIx</apiname></xref> member functions if the
object's data becomes inconsistent. </p> </entry>
</row>
</tbody>
</tgroup>
</table></conbody></concept>