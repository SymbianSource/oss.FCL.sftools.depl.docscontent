<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-088DC096-0CC7-5510-8D71-7DAF5961A681" xml:lang="en"><title>Using
Critical Sections</title><shortdesc>This document describes how to use critical sections.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Critical sections are provided to serialise access to shared resources.
They are Kernel objects and, as such, are managed by the Kernel.</p>
<p>A critical section can only be used by threads within the same process;
it <i>cannot</i> be used to control access to a resource shared by threads
across different processes. To serialise access to a resource shared by threads
across more than one process, use a mutex.</p>
<p>While a critical section is used to serialise access to a general resource,
it is used, typically, to serialise access to a section of re-entrant code
which cannot be executed concurrently by more than one thread within a process.
A critical section only allows one thread into a controlled section, forcing
other threads, that try to gain access to that critical section, to wait until
the first thread has exited from that section.</p>
<p>Note that threads which do not attempt to gain access to the critical section
are not blocked.</p>
<p>A critical section is implemented using a semaphore.</p>
<p>Access to a critical section object is through an <codeph>RCriticalSection</codeph> handle.</p>
</conbody></concept>