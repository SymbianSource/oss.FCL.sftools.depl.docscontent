<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-9D00655C-AFBA-5DF7-B11B-6B2355BDF08D" xml:lang="en"><title>Using
Semaphores</title><shortdesc>This document describes how to use semaphores.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Semaphores are provided to synchronise co-operating threads. They are Kernel
objects and, as such, are managed by the Kernel.</p>
<p>Access to a semaphore is through an RSemaphore handle.</p>
<p>The semaphores are counting semaphores, having a <codeph>TInt</codeph> count
value that is incremented by calling the <codeph>Signal()</codeph> member
function of the semaphore handle and decremented by calling the <codeph>Wait()</codeph> member
function of the semaphore handle. A semaphore with a negative value implies
that a thread must wait for the completion of some event.</p>
<p>The mechanism by which a thread waits on a semaphore is part of the overall
management of thread scheduling.</p>
<p>For general applications, it is not common to explicitly create a semaphore;
most applications are interested in making asynchronous requests to service
providers. When a thread is created, a <keyword>request         semaphore</keyword> is
also created that support asynchronous requests.</p>
<p>After making one or more asynchronous requests, a thread calls User::WaitForAnyRequest()
to wait for one of the requests to complete or calls User::WaitForRequest()
to wait for a specific request to complete. A service provider calls User::RequestComplete()
to signal request completion.</p>
</conbody></concept>