<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-036FCEAE-8137-5764-A512-DA1EE06DFCB8"><title>Messaging Principles</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>The design of the Messaging architecture is based on the following principles. </p> <section><title>Dynamic extensibility</title> <p>The Messaging architecture allows message client applications to discover at run-time which message types (that is, MTMs) are available, and to be notified if new MTMs are installed. Each MTM offers interfaces that allow message client applications to find its capabilities, and to obtain how the MTMâ€™s services must be offered to the user through the UI, so that appropriate commands can be dynamically added to menus. </p> </section> <section><title>Multiple simultaneous message client applications</title> <p>The Messaging architecture can support multiple message client applications having simultaneous access to message data. Examples of such potential message client applications are email clients, PC mail synchronisation utilities, and messaging-aware applications sending documents as messages. </p> </section> <section><title>Generic message description and operations</title> <p>The Messaging architecture allows message client applications to perform common operations, such as copying, moving, and sorting messages, without knowing the particular message type. There is a generic message description structure to allow message properties to be obtained. These features help message client applications to be designed without foreknowledge of the messaging protocols that may later be used. </p> </section> <section><title>Memory-efficiency</title> <p>Message client applications can load particular MTM components when they are required as a result of user actions. The architecture of the Message Server operates in a similar way, dynamically loading and unloading components to handle particular message types. </p> <p>With SQL database implementation for storing index entries, the RAM can be used effectively. For more information on the usage of SQLite database, see <xref href="GUID-5E8AA6B6-38EB-5347-BA30-F9FF4BF7C107.dita#GUID-5E8AA6B6-38EB-5347-BA30-F9FF4BF7C107/GUID-10265557-F31B-50B3-A955-A548A5A78D7B">Operating with the SQL database</xref>. </p> </section> </conbody><related-links><link href="GUID-4CEB52EC-8F08-53B7-A900-AF163316D442.dita"><linktext>Messaging Overview</linktext> </link> </related-links></concept>