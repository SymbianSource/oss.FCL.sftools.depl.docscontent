<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-FA12B3F7-4E84-5BBD-8598-9A974FFA7FCC"><title>What is Root Server Configurator?</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>Root Server Configurator is the starter program for the C32exe process. Root Server Configurator is started during device startup and then Root Server Configurator starts all the other servers used for device communication. </p> <p>Examples of these servers are the <xref href="GUID-61E0CD76-A2E3-5066-84A8-146EECA8ADCD.dita">Sockets Server</xref>, the <xref href="GUID-D49696D1-4B84-56B5-909D-A15F599F4B6D.dita">Telephony Server</xref> and the <xref href="GUID-9B83CDD4-FC94-51A0-AC67-CD04BCAFEF08.dita">Serial Communications Server</xref>. </p> <p>The Root Server Configurator is a separate process to the Root Server. </p> <p>To start the Root Server Configurator, a process must start either the <filepath>c32start.exe</filepath> program, or must call the <xref href="GUID-CFCBC5A6-FB1F-3DD7-B275-9B9C7389A8A7.dita"><apiname>StartC32()</apiname></xref> function. In the Techview reference version of Symbian OS, the steps in the startup up of the communications servers are: </p> <ol id="GUID-1036F8B2-A73F-524E-B6FA-A47D890F3089"><li id="GUID-E1C66978-2D2E-5AF8-8087-5C8F33B359C1"><p> <xref href="GUID-788BD091-186A-5E25-B058-952C7629A8D4.dita">System Starter</xref> calls <filepath>c32start.exe</filepath> to start the Root Server Configurator. </p> </li> <li id="GUID-1C5C4BBB-D5BB-5576-81A1-5C632B6F2BC1"><p>The Root Server Configurator loads the <xref href="GUID-10A0DC8C-70B3-53D0-B63F-786C4BAB36CF.dita">CMI files</xref>  </p> </li> <li id="GUID-9CFA086A-65C9-5F17-85E9-9CBFBE3B1D4D"><p>The Root Server Configurator calls <xref href="GUID-9DD1EA2B-DC59-315C-8E9C-CE6D9461B695.dita#GUID-9DD1EA2B-DC59-315C-8E9C-CE6D9461B695/GUID-DD214BA3-907E-3C7F-93C6-924A9A115A02"><apiname>RProcess::Create()</apiname></xref> to start the C32exe process. This starts the Root Server. </p> <p>The Root Server Configurator makes requests to Root Server for Root Server to load all the Comms Provider Modules. </p> </li> </ol> <p>After step 3, the device communications servers are all loaded and ready for use by applications. </p> <p>Figure 1 shows these three steps and how the Root Server and Root Server Configurator relate: </p> <fig id="GUID-09B31A56-73AF-5C89-87A7-E68A435FCDAD"><title>
          Figure 1 - How Root Server and Root Server relate, and the steps
          involved during startup 
        </title> <image href="GUID-4DB70D45-1E74-5357-9824-566962316E12_d0e94025_href.png" placement="inline"/></fig> <p>Root Server Configurator is configured by two types of files: <xref href="GUID-10A0DC8C-70B3-53D0-B63F-786C4BAB36CF.dita">CMI files</xref>, and the <xref href="GUID-B5FC3F90-9669-5DED-A6E2-CB927273850B.dita">c32start.ini</xref> file. </p> <p>Root Server Configurator does not provide a published API to its server. Root Server Configurator is the only application which uses the Root Server API. </p> </conbody></concept>