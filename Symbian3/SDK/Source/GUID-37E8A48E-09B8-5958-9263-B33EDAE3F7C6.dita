<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-37E8A48E-09B8-5958-9263-B33EDAE3F7C6" xml:lang="en"><title>UI
Control Framework Overview</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-4DB4AA3B-1CC9-4829-9146-B07BBDDEBAC5"><title>Architectural
relationships</title> <p>The control framework provides an abstract middle
layer between the low-level windowing functionality, provided by the Window
Server, and concrete user interface classes provided by UIKON and UI variant-specific
libraries. </p> <p>Application developers use the API directly to create their
own controls and indirectly through derived classes provided by UIKON and
AVKON. </p> <fig id="GUID-DD81BA7E-07D0-53C7-9B42-7BE263CC82D3">
<title>              Cone architectural relationships            </title>
<image href="GUID-63BB9C30-9103-5900-9FD7-5B45FD78A5D7_d0e45518_href.png" placement="inline"/>
</fig> </section>
<section id="GUID-9A9F72A2-0CA0-488A-91DE-35FD0A88B6CD"><title>Description</title> <p><b>Controls</b> </p> <p>A
control is a rectangular area of a window that may respond to user input.
Controls have a number of properties that determine their behavior and their
relationships to other controls and windows. </p> <p>A control is represented
by the class <xref href="GUID-B06F99BD-F032-3B87-AB26-5DD6EBE8C160.dita"><apiname>CCoeControl</apiname></xref>. </p> <p>A <b>simple control</b> is
one which contains no other controls. </p> <p>A <b>container control</b> is
one which contains one or more controls. A container control is also referred
to as a <b>compound control</b>. The contained controls may themselves be
container controls. When a control is contained in a container control it
is called a <b>component control</b>. A component control is always redrawn
when its container control is redrawn. </p> <p>The following diagram shows
simple controls in orange and container controls in grey. </p> <fig id="GUID-771A429A-B61E-5C45-83A9-4B9F76C40FB9">
<title>                 Simple and compound controls               </title>
<image href="GUID-8B37A2C7-B4DB-5826-B6C2-3C21012EF9EA_d0e45567_href.png" placement="inline"/>
</fig> <p><b>Controls and Windows </b> </p> <p>A window may be considered
as a transparent layer. Windows are managed by the Window Server and described <xref href="GUID-0C4B86B5-530A-5839-86C1-46E7ABE281E0.dita">elsewhere</xref>. A control
provides a means of access to a window - it can be drawn onto the window and
can receive input. </p> <p>Each window has a one-to-one relationship with
a single control that covers it precisely. This control is referred to as
a <b>window-owning control</b>. A window-owning control shares the behavior
of its window, in particular the parent-child window relationships which govern
the window's position and overlapping behavior. </p> <p>A <b>non-window-owning
control</b> typically covers only part of a window. It cannot be moved around
on the screen independently of its window, cannot draw outside its window
and is always a component control. </p> <p>You might think of a window-owning
control as a piece of glass and a non-window-owning control as a sticker on
a window-owning control. </p> <p><b>Application User Interface (AppUi) framework</b> </p> <p>The
application user interface framework provides support for the distribution
of key events to an application's controls. It maintains a control stack to
which an application must add all the top-level container controls that it
wishes to handle key events, setting a priority for each. When a key event
occurs, the framework offers it to each control on the stack in priority order
until it is consumed. </p> <p>The application user interface framework is
provided by the base class <xref href="GUID-3AC2CDAC-0291-309F-A020-049BC9F2CF90.dita"><apiname>CCoeAppUi</apiname></xref>. UIKON and UI variants
specialize <codeph>CCoeAppUi</codeph> further. Applications derive from the
variant AppUi. </p> <p> <xref href="GUID-3AC2CDAC-0291-309F-A020-049BC9F2CF90.dita"><apiname>CCoeAppUi</apiname></xref> provides a simplified
interface to the <xref href="GUID-830E40D0-7DEE-5EFB-BCC6-EC0AA7FF7A02.dita">View
Server</xref> which enables seamless switching between different views across
various applications. </p> <p><b>Control Environment (CoeEnv)</b> </p> <p>The
Control Environment simplifies the interface to the Window Server and provides
an environment for creating controls. It is a single instance (a singleton)
of the class <xref href="GUID-12A9389D-363B-3F54-857F-89EE0EDCDF40.dita"><apiname>CCoeEnv</apiname></xref> which encapsulates an active scheduler
and active objects for communicating with the window server. <xref href="GUID-12A9389D-363B-3F54-857F-89EE0EDCDF40.dita"><apiname>CCoeEnv</apiname></xref> is
created automatically by the framework and a pointer stored in Thread Local
Storage (TLS). It is available through <xref href="GUID-B06F99BD-F032-3B87-AB26-5DD6EBE8C160.dita#GUID-B06F99BD-F032-3B87-AB26-5DD6EBE8C160/GUID-BB8AF6C8-F7C8-3478-858A-4E2C68DF1B7A"><apiname>CCoeControl::CoeEnv()</apiname></xref>, <xref href="GUID-3AC2CDAC-0291-309F-A020-049BC9F2CF90.dita#GUID-3AC2CDAC-0291-309F-A020-049BC9F2CF90/GUID-6D8B3C54-087B-36C6-81A4-E07E92AA9D72"><apiname>CCoeAppUi::CoeEnv()</apiname></xref> and
through its own static function, <xref href="GUID-12A9389D-363B-3F54-857F-89EE0EDCDF40.dita#GUID-12A9389D-363B-3F54-857F-89EE0EDCDF40/GUID-7A9CB8EE-520A-30E2-BA54-5BEFBB56717F"><apiname>CCoeEnv::Static()</apiname></xref>, which
is less efficient. </p> <p>The control environment also provides simplified
access to drawing functions, fonts, and resource files which are used by most
applications. </p> </section>
<section id="GUID-060D338D-BADE-46A6-B7B1-DB28F07B39D3"><title>See also</title> <ul>
<li><p><xref href="GUID-1C802DBD-1453-5C69-94D5-FB0229C544D6.dita">Uikon Overview</xref></p></li>
<li><p><xref href="GUID-830E40D0-7DEE-5EFB-BCC6-EC0AA7FF7A02.dita">View Server
Overview</xref></p></li>
<li><p><xref href="GUID-0C4B86B5-530A-5839-86C1-46E7ABE281E0.dita">Window Server</xref></p></li>
<li><p><xref href="GUID-EEAB5A2F-AD1F-57B9-98AA-20DEEA23C3C2.dita">Asynchronous
Programming (active scheduler &amp; active objects)</xref></p></li>
</ul></section>
</conbody></concept>