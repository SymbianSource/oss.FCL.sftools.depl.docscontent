<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-C3FC557E-72B4-5714-AE21-930F421204D6"><title>Clearing a Rectangle</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>This topic shows you how to use <codeph>CBitmapContext::Clear()</codeph> to clear a rectangle to the current brush color. </p> <codeblock id="GUID-616556DA-B502-51D7-A08E-BC84022F2D3B" xml:space="preserve">TRect largeBox(0,0,100,100);
TRect clearBox(20,20,40,40);
    
// draw a cross-hatched box
gc.SetBrushColor(KRgbDarkGray);
gc.SetBrushStyle(CGraphicsContext::ESquareCrossHatchBrush);
gc.DrawRect(largeBox);
    
// clear a small rectangle
gc.SetBrushColor(KRgbGray); // change the brush color
gc.Clear(clearBox);   // clear to brush color</codeblock> <p> <b>Note</b>: When clearing a rectangle, the brush style is ignored, even if it is <codeph>TBrushStyle::ENullBrush</codeph>. </p> </conbody><related-links><link href="GUID-AFE8A9CC-E026-5396-8E0C-616338B5F5C3.dita"><linktext>BitGDI Tutorials</linktext> </link> <link href="GUID-EAAD1719-C02C-5705-A5C3-993E36441BE6.dita"><linktext>BitGDI Component</linktext> </link> </related-links></concept>