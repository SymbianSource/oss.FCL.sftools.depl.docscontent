<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-D51600DD-B79A-5A4D-B2D1-36C0A9F9D115" xml:lang="en"><title>How
to use CleanupDeletePushL()</title><shortdesc><codeph>CleanupDeletePushL()</codeph> pushes a <codeph>TCleanupItem</codeph> onto
the cleanup stack ready for <codeph>CleanupStack::PopAndDestroy()</codeph> to
delete.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>The <codeph>CleanupDeletePushL()</codeph> templated function constructs
and pushes a <codeph>TCleanupItem</codeph> onto the cleanup stack. When <codeph>CleanupStack::PopAndDestroy()</codeph> is
called, the object encapsulated by the <codeph>TCleanupItem</codeph> is deleted.</p>
<codeblock id="GUID-6AED7BDB-9CB8-588A-A286-AEAEECDB6868" xml:space="preserve">...
CTestOne* one = new (ELeave) CTestOne;
CleanupDeletePushL(one);
one-&gt;SetTextL(KTxtHelloWorld);
CleanupStack::PopAndDestroy();
...</codeblock>
<p>The <codeph>TCleanupItem</codeph> object encapsulates a pointer to the <codeph>CTestOne</codeph> object;
the cleanup operation is the static function <codeph>Delete()</codeph> of
the templated class <codeph>CleanupDelete&lt;class T&gt;</codeph>. This is implemented
by simply deleting <codeph>CTestOne</codeph>.</p>
</conbody></concept>