<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-2488FA07-BCAB-55DC-8724-C1C3C0DEC0AD"><title>Internalising</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>The process of internalising an object involves internalising its data from a stream. </p> <p>For a class instance, this involves internalising each of its data members and components from a stream in the same order that they were originally externalised. This process is encapsulated by the <codeph>InternalizeL()</codeph> member function of the class.</p> <p>A class always defines <codeph>InternalizeL()</codeph> as:</p> <codeblock id="GUID-D35F2448-0283-56CA-81CB-EEBD2666D3C3" xml:space="preserve">void InternalizeL(RReadStream&amp; aStream);</codeblock> <p>and uses the read stream interface class, <codeph>RReadStream</codeph>.</p> <p>Note that <codeph>InternalizeL()</codeph> is not virtual and there is no implication that a class that requires an <codeph>InternalizeL()</codeph> function must be derived from any particular base class.</p> </conbody></concept>