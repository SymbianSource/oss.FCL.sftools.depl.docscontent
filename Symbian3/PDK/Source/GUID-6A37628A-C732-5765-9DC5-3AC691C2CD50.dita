<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-6A37628A-C732-5765-9DC5-3AC691C2CD50" xml:lang="en"><title>Supporting
polymorphic interface DLLs with static interface DLLs</title><shortdesc>Explains how to support polymorphic interface DLLs with static
interface DLLs.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>In the previous sections showing how to use polymorphic interface DLLs,
the class declaration contains only pure virtual functions. In real applications,
the implementation of some of these functions could be the same in all implementation
DLLs, leading to duplication of code.</p>
<p>An abstract base class, intended for derivation in a polymorphic interface
DLL, can include functions declared as <codeph>IMPORT_C</codeph>. Such functions
must be implemented in a static interface DLL.</p>
<p>When a polymorphic interface DLL is loaded by <codeph>RLibrary::Load()</codeph>,
any static interface DLLs required by the polymorphic interface DLL are also
loaded.</p>
<p>If this technique is used, one function that can be usefully implemented
in the statically loaded DLL is an empty destructor.</p>
</conbody></concept>