<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-B1C0C5E2-DC8D-5230-8D4B-338DF619F1D2" xml:lang="en"><title>Critical
Sections Overview</title><shortdesc>This document is an overview of critical sections.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-0DF94D51-F739-4CFD-85B9-4EAF994743F6"><title>Purpose</title> <p>Synchronises exclusive access to shared
resources within a single process. </p> </section>
<section id="GUID-B5B624CB-4EEC-4E20-A92A-C87457D68C5C"><title>Description</title> <p>Critical sections are typically used
to serialize access to a section of re-entrant code that cannot be executed
concurrently by more than one thread within a process. A critical section
object only allows one thread into a controlled section, forcing other threads
which attempt to gain access to that critical section to wait until the first
thread has exited from that section.</p> <p>A critical section <i>cannot</i> be
used to control access to a resource shared by threads across different processes.
For that, use a mutex.</p> <p>Critical sections are Kernel objects and, as
such, are managed by the Kernel, and accessed by user programs through handles.
They are implemented using a semaphore. </p> <p>The critical section handle
is provided by <xref href="GUID-FC5F1EC1-28CC-3B06-83C4-B90EF8EEBA07.dita"><apiname>RCriticalSection</apiname></xref>.</p> </section>
</conbody></concept>