<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-130575A7-894A-566B-9B8E-902B211BFE7A"><title>driver1.h</title><prolog><metadata><keywords/></metadata></prolog><conbody><codeblock id="GUID-19998251-086E-5ED2-884C-9FF7D6D2CBAF" xml:space="preserve">// driver1.h
//
// Copyright (c) 2009 Nokia Ltd. All rights reserved.
//

#ifndef __DRIVER1_H__
#define __DRIVER1_H__

#include &lt;e32cmn.h&gt;
#include &lt;e32ver.h&gt;
#ifndef __KERNEL_MODE__
#include &lt;e32std.h&gt;
#endif

/**
User interface for 'Driver1'
*/
class RDriver1 : public RBusLogicalChannel
    {
public:
    /**
    Structure for holding driver capabilities information
    (Just a version number in this example.)
    */
    class TCaps
        {
    public:
        TVersion iVersion;
        };

    /**
    Structure for holding driver configuration data
    */
    class TConfig
        {
    public:
        TInt iSpeed;                /**&lt; Data transfer speed in microseconds/byte */
        TInt iPddBufferSize;        /**&lt; Size of the PDD's data buffer (not modifiable) */
        TInt iMaxSendDataSize;      /**&lt; Maximum size of data which can be sent in one go (not modifiable) */
        TInt iMaxReceiveDataSize;   /**&lt; Maximum size of data which can be received in one go (not modifiable) */
        };
    typedef TPckgBuf&lt;TConfig&gt; TConfigBuf;

public:
    TInt Open();
    TInt GetConfig(TConfigBuf&amp; aConfig);
    TInt SetConfig(const TConfigBuf&amp; aConfig);
    void SendData(TRequestStatus&amp; aStatus,const TDesC8&amp; aData);
    void SendDataCancel();
    void ReceiveData(TRequestStatus&amp; aStatus,TDes8&amp; aBuffer);
    void ReceiveDataCancel();
    inline static const TDesC&amp; Name();
    inline static TVersion VersionRequired();

private:
    /**
    Enumeration of Control messages.
    */
    enum TControl
        {
        EGetConfig,
        ESetConfig
        };

    /**
    Enumeration of Request messages.
    */
    enum TRequest
        {
        ESendData,
        EReceiveData,
        ENumRequests,
        EAllRequests = (1&lt;&lt;ENumRequests)-1
        };

    // Kernel side LDD channel is a friend
    friend class DDriver1Channel;
    };


/**
  Returns the driver's name
*/
inline const TDesC&amp; RDriver1::Name()
    {
    _LIT(KDriver1Name,"DRIVER1");
    return KDriver1Name;
    }

/**
  Returns the version number of the driver
*/
inline TVersion RDriver1::VersionRequired()
    {
    const TInt KMajorVersionNumber=1;
    const TInt KMinorVersionNumber=0;
    const TInt KBuildVersionNumber=KE32BuildVersionNumber;
    return TVersion(KMajorVersionNumber,KMinorVersionNumber,KBuildVersionNumber);
    }

/*
  NOTE: The following member functions would normally be exported from a seperate client DLL
  but are included inline in this header file for convenience.
*/

#ifndef __KERNEL_MODE__

/**
  Opens a logical channel to the driver

  @return One of the system wide error codes.
*/
TInt RDriver1::Open()
    {
    return DoCreate(Name(),VersionRequired(),KNullUnit,NULL,NULL,EOwnerThread);
    }


/**
  Gets the current configuration settings.

  @param aConfig A structure which will be filled with the configuration settings.

  @return KErrNone
*/
TInt RDriver1::GetConfig(TConfigBuf&amp; aConfig)
    {
    return DoControl(EGetConfig,(TAny*)&amp;aConfig);
    }


/**
  Sets the current configuration settings.

  @param aConfig The new configuration settings to be used.

  @return KErrInUse if there are outstanding data transfer requests.
          KErrArgument if any configuration values are invalid.
          KErrNone otherwise
*/
TInt RDriver1::SetConfig(const TConfigBuf&amp; aConfig)
    {
    return DoControl(ESetConfig,(TAny*)&amp;aConfig);
    }


/**
  Sends data to the device.
  Only one send request may be pending at any time.

  @param aStatus The request to be signalled when the data has been sent.
                 The result value will be set to KErrNone on success;
                 or set to one of the system wide error codes when an error occurs.
  @param aData   A descriptor containing the data to send.
*/
void RDriver1::SendData(TRequestStatus&amp; aStatus,const TDesC8&amp; aData)
    {
    DoRequest(ESendData,aStatus,(TAny*)&amp;aData);
    }


/**
  Cancels a previous SendData request.
*/
void RDriver1::SendDataCancel()
    {
    DoCancel(1&lt;&lt;ESendData);
    }

     
/**
  Receives data from the device.
  Only one receive request may be pending at any time.

  @param aStatus The request to be signalled when the data has been received.
                 The result value will be set to KErrNone on success;
                 or set to one of the system wide error codes when an error occurs.
  @param aData   A descriptor to which the received data will be written.
*/
void RDriver1::ReceiveData(TRequestStatus&amp; aStatus,TDes8&amp; aBuffer)
    {
    DoRequest(EReceiveData,aStatus,(TAny*)&amp;aBuffer);
    }


/**
  Cancels a previous ReceiveData request.
*/
void RDriver1::ReceiveDataCancel()
    {
    DoCancel(1&lt;&lt;EReceiveData);
    }

#endif   // !__KERNEL_MODE__

#endif

</codeblock> </conbody></concept>