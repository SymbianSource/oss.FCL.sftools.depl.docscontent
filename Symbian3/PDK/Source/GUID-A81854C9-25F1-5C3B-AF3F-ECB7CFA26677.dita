<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-A81854C9-25F1-5C3B-AF3F-ECB7CFA26677"><title>Creating the receive stream</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>This page describes how to create a receive source. </p> <p>The <codeph>RRtpReceiveSource</codeph> class represents the stream of data on a single SSRC (synchronised source) and delivers the RTP packets and RTCP information in the order they arrive. </p> <p> <codeph>RRtpSession</codeph> allows you to create a new receive stream. <codeph>NewReceiveSourceLC()</codeph> and <codeph>NewReceiveSourceL()</codeph> create a new receive stream and return a handle to an <codeph>RRtpReceiveSource</codeph>. </p> <section><title>Receiving the packet</title> <p> <codeph>RRtpReceivePacket</codeph> is derived from <codeph>RRtpPacket</codeph> and provides a handle to a received RTP packet. To access the packet information, use the functions listed in <xref href="GUID-46047253-4471-502D-B48E-E1990E7F7962.dita#GUID-46047253-4471-502D-B48E-E1990E7F7962/GUID-9E7AAB77-6F14-51AE-8008-B2F1C49667A5">Preparing the packet</xref>. </p> <p> <codeph>RRtpReceiveSource</codeph> provides the following functionality: </p> <p> <codeph>IsOpen</codeph> returns <codeph>ETrue</codeph> if the stream is open. </p> <p> <codeph>GetByeReason</codeph>: Retrieves the reason for terminating the session </p> <p> <codeph>GetLastApp</codeph>: Retrieves the parameters from the last APP packet. You must specify the application name, application data, and sub-type of the APP packet. </p> <p> <codeph>Packet</codeph>: Gets the packet that has just arrived, or a closed packet if there is not one. </p> <p> <codeph>GetSDES</codeph>: Gets the data associated with the SDES (Source Description) item such as CNAME, NAME and so on. </p> <p> <codeph>SSRC</codeph>: Gets the source of stream of the RTP packets. </p> <p> <codeph>Close</codeph>: Closes the receive stream and releases all its resources. </p> <p>To register for events from a stream, refer to the section <xref href="GUID-9652782C-D5A7-584F-A61C-1340D49478A2.dita">Registering for and handling events</xref>. </p> <p> <b>Note</b>: Before receiving an RTP packet you must set the bandwidth for the RTP session. The following code snippet shows how to set the bandwidth for an RTP session. </p> <codeblock id="GUID-E4210BDD-FC9C-5660-9773-FE91683994EF" xml:space="preserve">IMPORT_C void SetBandwidth(TUint aBandwidth) </codeblock> </section> <section><title>See also</title> <p> <xref href="GUID-5287A403-1094-5682-A443-A6C2A04A1F23.dita">Creating and Managing an RTP session</xref>  </p> </section> </conbody></concept>