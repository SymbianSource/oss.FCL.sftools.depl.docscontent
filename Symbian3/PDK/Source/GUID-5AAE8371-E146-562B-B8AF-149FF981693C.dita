<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-5AAE8371-E146-562B-B8AF-149FF981693C"><title>Observers and Notification</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>Messaging Framework provides two mixin interfaces, which define session observers and entry observers. </p> <ul><li id="GUID-8781CEE0-5C4C-5539-9691-6081747C8473"><p>The <xref href="GUID-BDE23754-4536-3AF7-8549-3B953F51167C.dita"><apiname>MMsvSessionObserver </apiname></xref> class is defined as a session observer is notified of events such as shutdown warnings, new message arrival, and registration of new MTMs. A class belonging to a message client application, such as the application UI class, must implement the interface to handle such events and take appropriate action. The clientâ€™s message server session object can also call the interface whenever it completes a request to the Message Server. </p> <p>Session observers are important for run-time extensibility of the Messaging architecture, as message client applications can be informed of new <xref href="GUID-E96D8052-0CB2-53A6-915F-133D3058DCF9.dita">MTMs being registered</xref>. As the registry classes are session observers, they also can update their lists of the available MTM components, allowing new components to be loaded. </p> </li> <li id="GUID-32DAABF3-F9C0-5981-9795-49A4592124E8"><p>The <xref href="GUID-B36289AC-769F-3A83-BADB-AE0568E97581.dita"><apiname>MMsvEntryObserver</apiname></xref> class is notified when an individual entry changes, or when access to a message store has been successfully gained. Client objects that need to observe a session view must implement this interface. </p> </li> </ul> </conbody></concept>