<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-935DF48C-F014-5E2A-8BE6-29B00C4FD31D" xml:lang="en"><title>Component
Specific Debugging Help</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-320B950A-06A8-54A2-89F4-87FE3D7384E1"><title>Node Framework</title> <p>To
debug any Node in the Comms Three Plane Architecture, use: </p> <ul>
<li id="GUID-C43A1617-B957-5C76-B8CA-BDBEF4EB2CE6"><p>SVG diagrams to see
the message traffic. See <xref href="GUID-ABE77283-EED8-5A33-B574-3B771EF11086.dita">How
to Use ULogger with Comms</xref>  </p> </li>
<li id="GUID-8ED2D6CD-D55C-5698-A49A-E8478C9FCD03"><p>Conditional breakpoints
in the <codeph>ReceivedL</codeph> function of the Node. </p> <p>The extensive
re-use of code for states and transitions causes breakpoints in the code for
states and transitions to be called many times. These breakpoints may not
be effective. Set conditional breakpoints in the ReceiveL functon of Nodes
to track the processing of messages within a Node. </p> </li>
</ul> </section>
<section id="GUID-820398A9-17FD-5A87-8C45-64BDD99C312D"><title>IP Networking</title> <p> <b>General
networking</b> - For debugging network problems, a version of ping and IPConfig
are provided with the source code for Symbian platform and built into test
builds. To build manually, the code is located in <codeph>\networking\inetutil\</codeph>. </p> <p> <b>IPSec,
IPSec6, IPSecPol</b> - These components use Flogger. For more information
see <xref href="GUID-0EF25CCA-1E6B-5B62-8E77-9A670986C5EF.dita">Textual Logging</xref>. </p> <p> <b>PPP,
RAW IP and other NIF 's</b> - Full packet logging of each PPP frame is available
from the PPP component. Enable the CDU tags and extract the binary output
from the log file using the <codeph>splitlog.bat</codeph> program. For more
information see <xref href="GUID-0EF25CCA-1E6B-5B62-8E77-9A670986C5EF.dita">Textual
Logging</xref>. This binary output can then be loaded into a packet viewer
program such as the freeware Wireshark (formerly Ethereal). For more information
see <xref href="GUID-61B3E668-07ED-58BD-9D11-04BC293A5187.dita#GUID-61B3E668-07ED-58BD-9D11-04BC293A5187/GUID-D98CA3A0-5B40-5CF2-8DD7-552A6E12B34A">PPP
Ini File: [log]</xref>. The RAW IP NIF will similarly log, using the CDU tag
"<codeph>LOG RawIP *</codeph> ", in the Wireshark-compatible <i>pcap</i> format.
The Ethernet NIF uses the "<codeph>LOG TCPDump           *</codeph> " tags. </p> <p>The
TCPdumping example code hooks into the TCP/IP stack and dumps the TCP traffic
in pcap format, which is suitable for loading into Wireshark. This is useful
when using a NIF which does not provide its own logging. The TCPdumping executable
is only built in test builds, so to build it manually refer to the source
code located at <filepath>networking\examplecode\tcpdumping</filepath>. </p> <p> <b>Tcpip6</b> -
The logs from this component are some of the most useful when debugging. Note
that some versions of this component use Flogger, while others use CDU with
the tags "<codeph>LOG inet6 *</codeph> ". </p> </section>
<section id="GUID-867983C3-9C7F-5C28-AE1B-5DE0451C8AD4"><title>Bluetooth</title> <p> <b>Bluetooth</b> -
The Bluetooth host controller allows vendor-specific debugging events to be
reported back using a secure channel. For more information see <xref href="GUID-5C63EF5C-826D-5838-BB7E-12FF4EA1DFCE.dita">Debugging
the Host Controller</xref>. </p> </section>
<section id="GUID-0FF90100-006F-55BE-8E5C-41BAE8D5C92E"><title>Telephony</title> <p> <b>Etel</b> -
The <xref href="GUID-D49696D1-4B84-56B5-909D-A15F599F4B6D.dita">Telephony Server</xref> can
record and play back the IPC messages passing through the server. It can be
installed on the device to record the messages, and then the recording can
be processing in a debugging environment without the need for the specific
device or network environment. This is very useful for reproducing defects. </p> </section>
</conbody></concept>