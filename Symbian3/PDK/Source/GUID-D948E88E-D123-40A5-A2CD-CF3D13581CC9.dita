<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-D948E88E-D123-40A5-A2CD-CF3D13581CC9" xml:lang="en"><title>Pin
Idle Function</title><shortdesc>Describes the pin idle functions involved in implementing the Symbian
platform GPIO class.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>When a pin is in Idle mode it is in a third electrical state, different
from High and Low. This state is called <codeph>DefaultIdleState</codeph> and
does not correspond to the logical state of the pin. A pin should never be
in this state when its direction is input because input pins are always in
Enabled or Disabled mode. (A pin might theoretically be in <codeph>DefaultIdleState</codeph> because
it has never been enabled, but that would be a programming error.) However,
when a module enters the Idle state so do its pins. There are also circumstances
when it is necessary to know the electrical state of an output pin because
it cannot be deduced from the logical state. For this reason the Symbian platform
GPIO class specifies functions to get and set the electrical state of a pin
for three values and not two.</p>
<section id="GUID-7ECD4CDD-1320-4AEA-AC9D-B2A473536C21"><title>Implement the
pin idle functions</title>  <ul>
<li><p>          Implement <xref href="GUID-0C5314C5-EE55-3974-8ED5-5AE26C0638F0.dita"><apiname>SetPinIdleConfigurationAndState()</apiname></xref> 
         with return value <xref href="GUID-6CA4F1ED-7947-3087-B618-D35858FAA3BC.dita"><apiname>KErrNone</apiname></xref>.         </p> <p> 
        Return <xref href="GUID-6CA4F1ED-7947-3087-B618-D35858FAA3BC.dita"><apiname>KErrNone</apiname></xref>         </p> </li>
<li><p>             Implement             <xref href="GUID-0C5314C5-EE55-3974-8ED5-5AE26C0638F0.dita"><apiname>SetPinIdleConfigurationAndState()</apiname></xref> with
return value             <xref href="GUID-F89DA3F0-2A48-3F9B-8F08-29350E92D0E4.dita"><apiname>KErrNotSupported</apiname></xref>.           </p> <p> 
           Return <xref href="GUID-F89DA3F0-2A48-3F9B-8F08-29350E92D0E4.dita"><apiname>KErrNotSupported</apiname></xref> if the pin does    
        not support the idle state.           </p> </li>
<li><p>             Implement             <xref href="GUID-4BF99D43-8F53-36B0-803D-FE86A1EF943A.dita"><apiname>GetPinIdleConfigurationAndState()</apiname></xref> with
return value             <xref href="GUID-6CA4F1ED-7947-3087-B618-D35858FAA3BC.dita"><apiname>KErrNone</apiname></xref>.           </p> <p> 
           Return <xref href="GUID-6CA4F1ED-7947-3087-B618-D35858FAA3BC.dita"><apiname>KErrNone</apiname></xref>           </p> </li>
<li><p>                Implement                <xref href="GUID-4BF99D43-8F53-36B0-803D-FE86A1EF943A.dita"><apiname>GetPinIdleConfigurationAndState()</apiname></xref> with
return value                <xref href="GUID-6CA4F1ED-7947-3087-B618-D35858FAA3BC.dita"><apiname>KErrNone</apiname></xref>.              </p> <p> 
              Return <xref href="GUID-F89DA3F0-2A48-3F9B-8F08-29350E92D0E4.dita"><apiname>KErrNotSupported</apiname></xref> if the pin does 
              not support the idle state.              </p> </li>
</ul> </section>
</conbody></concept>