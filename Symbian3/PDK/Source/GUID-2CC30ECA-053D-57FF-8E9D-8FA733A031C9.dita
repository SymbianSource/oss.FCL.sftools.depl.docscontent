<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-2CC30ECA-053D-57FF-8E9D-8FA733A031C9"><title>Viewfinder</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>This tutorial introduces you to the Viewfinder functionality of the Ecam component. </p> <section><title>Purpose</title> <p>This document describes the various APIs used with Viewfinder. </p> <p><b>Introduction</b> </p> <p>The viewfinder classes provides the support for multiple direct and client viewfinder. The image adjustment features such as histograms, image processing and direct snapshot can be used specifically for a given direct viewfinder. Client can get specific histogram or image processing object for client viewfinder. </p> <p>The viewfinder can directly transfer frames from a camera to the display memory. If supported, the client can also implement viewfinder functionality by itself using image data returned in call-backs. </p> <p>Enabling mirroring flips the image horizontally. Devices that allow the user to view themself can then be used as a virtual mirror. The viewfinder should be able to run simultaneously with video or image capture. </p> <p><b>Setup and Configuration Requirements</b> </p> <p>If video or image capture preparation puts the camera into a mode that has an effect on the viewfinder aspect ratio and size, then the recent successful prepare should determine the context for viewfinder operation. </p> <p>It is expected that the viewfinder aspect and size follow the settings in the last image or video prepare call. Multiple viewfinders may run at the same time by the use of new extension classes: <xref href="GUID-9DE13B2C-F605-348F-8056-519DDE4CAE1B.dita"><apiname>CcameraV2DirectViewFinder</apiname></xref> and <xref href="GUID-B43EAE70-1B2C-3B41-B9A8-7FBB1A87C804.dita"><apiname>CcameraClientViewFinder</apiname></xref>. </p> <p>A new instance of these classes needs to be created for every new viewfinder. Dedicated observers: <xref href="GUID-05EEF6CC-E007-348C-8643-AA02D634F90C.dita"><apiname>MdirectViewFinderObserver</apiname></xref> and <xref href="GUID-C4F40144-7132-309A-B648-E366786B4DE4.dita"><apiname>MclientViewFinderObserver</apiname></xref> provide viewfinder related call-backs to the client. Client should implement these observers. </p> <p><b>Types of Viewfinder</b> </p> <p>The client starts a viewfinder, when the camera is powered-on. There are two types of viewfinder. </p> <ul><li id="GUID-6737C827-D2C3-57A1-AE74-F4318DF4E12C"><p> <b> Direct viewfinder</b>  </p> <p>The viewfinder frames are displayed directly to the screen. </p> <p>If the client uses class <xref href="GUID-021C509B-C821-3401-B2F4-DE7F52BB16D4.dita#GUID-021C509B-C821-3401-B2F4-DE7F52BB16D4/GUID-5E76AB90-FE62-37B2-BAAE-A39EA6CE51DA"><apiname>CCamera::CCameraV2DirectViewFinder</apiname></xref> to start the direct viewfinder, it must implement the observer <xref href="GUID-3E9347CF-F172-3E7B-B209-7F9836090F61.dita"><apiname>MDirectViewFinderObserver</apiname></xref> to receive relevant callbacks. For example, a client can identify when the first direct viewfinder frame has been displayed on the screen through callback <xref href="GUID-3E9347CF-F172-3E7B-B209-7F9836090F61.dita#GUID-3E9347CF-F172-3E7B-B209-7F9836090F61/GUID-163D5092-A013-3477-8459-CEC9FFF1EDBA"><apiname>MDirectViewFinderObserver::DirectViewFinderFirstFrameDisplayed()</apiname></xref>. </p> </li> <li id="GUID-C98250AB-FAD8-5444-B420-C9008B96E147"><p> <b> Client viewfinder</b>  </p> <p>The viewfinder frames are sent back to the client through <xref href="GUID-2E8D5B41-2E0F-3296-AC3B-762C9E94C66B.dita"><apiname>McameraOberver2</apiname></xref> notification. Client is responsible for displaying the images to the screen. </p> <p>If the client uses class <xref href="GUID-021C509B-C821-3401-B2F4-DE7F52BB16D4.dita#GUID-021C509B-C821-3401-B2F4-DE7F52BB16D4/GUID-4618B02E-CD2E-3DEA-979F-4C55AE3D45EC"><apiname>CCamera::CCameraClientViewFinder</apiname></xref> to start client viewfinder, it must implement the observer <xref href="GUID-E88979A4-EC0E-3198-8474-38711C8CA5D1.dita"><apiname>MClientViewFinderObserver</apiname></xref> and get the viewfinder data through related callbacks, such as <xref href="GUID-E88979A4-EC0E-3198-8474-38711C8CA5D1.dita#GUID-E88979A4-EC0E-3198-8474-38711C8CA5D1/GUID-E42D2312-4D77-3F1E-86D6-64E5C1C274E7"><apiname>MClientViewFinderObserver::ViewFinderBufferReady()</apiname></xref>. </p> </li> </ul> </section> <section><title>See also</title> <p><xref href="GUID-367ADFD7-A0F5-59D3-BF83-913CB8126B9D.dita">Overview</xref> of Viewfinder API </p> <p>The <xref href="GUID-BFE8B989-8B73-5D3E-B5F4-13AC016C122C.dita">Direct Viewfinder</xref> Tutorial </p> <p>The <xref href="GUID-2A6AAD9C-BB99-5145-B4A2-FCEF6BECCFD4.dita">Client Viewfinder</xref> Tutorial </p> </section> </conbody></concept>