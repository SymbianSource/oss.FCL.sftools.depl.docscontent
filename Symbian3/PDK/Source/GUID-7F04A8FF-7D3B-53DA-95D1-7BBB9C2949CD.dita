<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-7F04A8FF-7D3B-53DA-95D1-7BBB9C2949CD" xml:lang="en"><title>Category:
USER</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Panics with this category are raised on the user side by member functions
of T type and R type classes, which reside in the <filepath>euser.dll</filepath> file. </p>
<p>They are also raised by some static member functions of the <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita"><apiname>User</apiname></xref>, <xref href="GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01.dita"><apiname>UserHeap</apiname></xref> and <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> classes.
Typically, they are caused by passing bad or contradictory values to class
constructors or member functions. </p>
<p>The thread causing the panic is terminated. </p>
<table id="GUID-8DFFA21D-14B3-59EF-8CA2-9F59DE21447C">
<tgroup cols="2"><colspec colname="col0"/><colspec colname="col1"/>
<tbody>
<row>
<entry><p> <codeph>0</codeph>  </p> </entry>
<entry><p>This panic is raised when a thread calls <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita"><apiname>Invariant</apiname></xref> . </p> <p>The <codeph>Invariant</codeph> function
is called when a test for a class invariant fails while checking the internal
data of an object is self-consistent. </p> <p>Check the design and implementation
of the class. </p> </entry>
</row>
<row>
<entry><p> <codeph>3</codeph>  </p> </entry>
<entry><p>This panic is raised when a <xref href="GUID-13A9DD2B-8ABC-3D62-B54E-4F5DD5B9228B.dita"><apiname>TDateTime</apiname></xref> object
is constructed with an invalid date or time field. </p> </entry>
</row>
<row>
<entry><p> <codeph>7</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Ptr()</codeph> member function
of a 16-bit variant descriptor if the descriptor is invalid. </p> <p>Check
for ways in which the descriptor may have become corrupted, including an unsafe
use of cast. </p> </entry>
</row>
<row>
<entry><p> <codeph>8</codeph>  </p> </entry>
<entry><p>This panic is raised when a length value passed to a 16-bit variant
descriptor member function is invalid. It may be raised by some descriptor
constructors and, specifically, by the <codeph>Replace()</codeph> and <codeph>Set()</codeph> descriptor
member functions. </p> </entry>
</row>
<row>
<entry><p> <codeph>9</codeph>  </p> </entry>
<entry><p>This panic is raised when the index value passed to the 16-bit variant
descriptor <codeph>Operator()</codeph> is out of bounds </p> </entry>
</row>
<row>
<entry><p> <codeph>10</codeph>  </p> </entry>
<entry><p>This panic is raised when the position value passed to a 16-bit
variant descriptor member function is out of bounds. It may be raised by the <codeph>Left()</codeph>, <codeph>Right()</codeph>, <codeph>Mid()</codeph>, <codeph>Insert()</codeph>, <codeph>Delete()</codeph> and <codeph>Replace()</codeph> member
functions of <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita"><apiname>TDes16</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>11</codeph>  </p> </entry>
<entry><p>This panic is raised when any operation that moves or copies data
to a 16-bit variant descriptor, causes the length of that descriptor to exceed
its maximum length. </p> <p>It may be caused by any of the copying, appending
or formatting member functions and, specifically, by the <codeph>Insert</codeph>, <codeph>Replace</codeph>, <codeph>Fill</codeph>, <codeph>Fillz</codeph> and <codeph>ZeroTerminate</codeph> descriptor member functions. It can also
be caused by the <codeph>SetLength</codeph> function. See <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita"><apiname>TDes16</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>12</codeph>  </p> </entry>
<entry><p>This panic is raised when the format string passed to the 16-bit
variant descriptor member functions <codeph>Format</codeph> and <codeph>AppendFormat</codeph> has
invalid syntax. </p> <p>See <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita#GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD/GUID-F3ED8A38-74C5-3C4D-AEAF-B405A0C5807D"><apiname>TDes16::Format()</apiname></xref> and <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita#GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD/GUID-D7E07487-DCE6-39D9-B4A2-BA7E5BD4A4B9"><apiname>TDes16::AppendFormat()</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>13</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the <codeph>AppendFormatList()</codeph> member function of the 16-bit
variant descriptor <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita"><apiname>TDes16</apiname></xref>, if an invalid variable list
is passed to the function when the format is <codeph>%S</codeph> or <codeph>%s</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>14</codeph>  </p> </entry>
<entry><p>This panic is raised when expanding or contracting an <xref href="GUID-3D3D9CD7-C8FD-3F81-9CC5-1A71D4F9751E.dita"><apiname>HBufC16</apiname></xref> buffer
using the <codeph>ReAlloc()</codeph> or <codeph>ReAllocL()</codeph> descriptor
member functions. Specifically, the panic occurs if the new length being specified
is too small to contain the data. </p> </entry>
</row>
<row>
<entry><p> <codeph>16</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Replace()</codeph> member function
of the 16-bit variant descriptor <xref href="GUID-C04A9A0C-DBA7-37DA-B744-54FBF3D544CD.dita"><apiname>TDes16</apiname></xref> when the length
of the source descriptor is negative or exceeds the maximum length of the
target descriptor. </p> </entry>
</row>
<row>
<entry><p> <codeph>17</codeph>  </p> </entry>
<entry><p>This panic is raised when 16-bit variant descriptors are constructed
with negative length values. It may also be raised if the <codeph>Set()</codeph>, <codeph>Repeat()</codeph> and
the <codeph>Find()</codeph> member functions are passed negative length values. </p> </entry>
</row>
<row>
<entry><p> <codeph>18</codeph>  </p> </entry>
<entry><p>This panic is raised when 16-bit variant descriptors are constructed
with negative maximum length values. </p> </entry>
</row>
<row>
<entry><p> <codeph>19</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Ptr()</codeph> member function
of an 8 bit variant descriptor if the descriptor is invalid. Check for ways
in which the descriptor may have become corrupted, including an unsafe use
of cast. </p> </entry>
</row>
<row>
<entry><p> <codeph>20</codeph>  </p> </entry>
<entry><p>This panic is raised when a length value passed to an 8 bit variant
descriptor member function is invalid. It may be raised by some descriptor
constructors and, specifically, by the <codeph>Replace()</codeph> and <codeph>Set()</codeph> descriptor
member functions. </p> </entry>
</row>
<row>
<entry><p> <codeph>21</codeph>  </p> </entry>
<entry><p>This panic is raised when the index value passed to the 8 bit variant
descriptor <codeph>Operator[]</codeph> is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>22</codeph>  </p> </entry>
<entry><p>This panic is raised when the position value passed to an 8 bit
variant descriptor member function is out of bounds. It may be raised by the <codeph>Left()</codeph>, <codeph>Right()</codeph>, <codeph>Mid()</codeph>, <codeph>Insert()</codeph>, <codeph>Delete()</codeph> and <codeph>Replace()</codeph> descriptor
member functions. </p> </entry>
</row>
<row>
<entry><p> <codeph>23</codeph>  </p> </entry>
<entry><p>This panic is raised when any operation that moves or copies data
to an 8 bit variant descriptor, causes the length of that descriptor to exceed
its maximum length. </p> <p>It may be caused by any of the copying, appending
or formatting member functions and, specifically, by the <codeph>Insert()</codeph>, <codeph>Replace()</codeph>, <codeph>Fill()</codeph>, <codeph>Fillz()</codeph> and <codeph>ZeroTerminate()</codeph> descriptor member functions. It can
also be caused by the <codeph>SetLength()</codeph> function. See <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita"><apiname>TDes8</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>24</codeph>  </p> </entry>
<entry><p>This panic is raised when the format string passed to the 8 bit
variant descriptor member functions <codeph>Format()</codeph> and <codeph>AppendFormat()</codeph> has
invalid syntax. </p> <p>See <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita#GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507/GUID-EE7DBF18-A16C-3983-924F-20C1907E7AAA"><apiname>TDes8::Format()</apiname></xref> and <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita#GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507/GUID-E8BE9DD1-2D96-3E8E-943A-CD2ECFD78333"><apiname>TDes8::AppendFormat()</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>25</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by the <codeph>AppendFormatList()</codeph> member function
of the 8-bit variant descriptor <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita"><apiname>TDes8</apiname></xref>, if an invalid variable
list is passed to the function when the format is <codeph>%S</codeph> or <codeph>%s</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>26</codeph>  </p> </entry>
<entry><p>This panic is raised when expanding or contracting an <xref href="GUID-2A528453-0279-3E47-838C-F8A8D29B88F1.dita"><apiname>HBufC8</apiname></xref> buffer
using the <codeph>ReAlloc()</codeph> or <codeph>ReAllocL()</codeph> descriptor
member functions. Specifically, the panic occurs if the new length being specified
is too small to contain the data. </p> </entry>
</row>
<row>
<entry><p> <codeph>28</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Replace()</codeph> member function
of the 8-bit variant descriptor <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita"><apiname>TDes8</apiname></xref>, when the length
of the source descriptor is negative or exceeds the maximum length of the
target descriptor. </p> </entry>
</row>
<row>
<entry><p> <codeph>29</codeph>  </p> </entry>
<entry><p>This panic is raised when 8-bit variant descriptors are constructed
with negative length values. It may also be raised if the <codeph>Set()</codeph>, <codeph>Repeat()</codeph> and
the <codeph>Find()</codeph> member functions are passed negative length values. </p> </entry>
</row>
<row>
<entry><p> <codeph>30</codeph>  </p> </entry>
<entry><p>This panic is raised when 8-bit variant descriptors are constructed
with negative maximum length values. </p> </entry>
</row>
<row>
<entry><p> <codeph>32</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the <codeph>Pos()</codeph> member function of a <codeph>TRawEvent</codeph>.
The function returns the mouse/pen position encapsulated by the <codeph>TRawEvent</codeph>.
The panic is raised when the event is not a mouse/pen type event. </p> </entry>
</row>
<row>
<entry><p> <codeph>33</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the <codeph>ScanCode()</codeph> member function of a <codeph>TRawEvent</codeph>.
The function returns the scan code associated with a key down or key up event
encapsulated by the <codeph>TRawEvent</codeph>. The panic is raised when the
event is not a key down or key up event. </p> </entry>
</row>
<row>
<entry><p> <codeph>34</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the <codeph>Modifiers()</codeph> member function of a <codeph>TRawEvent</codeph>.
The function returns the modifers associated with a modifiers update event
encapsulated by the <codeph>TRawEvent</codeph>. The panic is raised when the
event is not a modifier update event. </p> </entry>
</row>
<row>
<entry><p> <codeph>35</codeph>  </p> </entry>
<entry><p>This panic is raised by the default <codeph>At()</codeph> virtual
member function of <xref href="GUID-0756A649-486C-3CE5-9F1E-467E008A63C7.dita"><apiname>TKey</apiname></xref>. The function is intended to be
overridden by a derived class. </p> </entry>
</row>
<row>
<entry><p> <codeph>36</codeph>  </p> </entry>
<entry><p>This panic is raised by the default <codeph>Swap()</codeph> virtual
member function of <xref href="GUID-04117018-A42A-3D49-9EA3-D1D7A7785B0A.dita"><apiname>TSwap</apiname></xref>. The function is intended to be
overridden by a derived class. </p> </entry>
</row>
<row>
<entry><p> <codeph>37</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>operator()</codeph> of a <xref href="GUID-B6D6B0AD-B15C-339A-8540-40540885089A.dita"><apiname>TUidType</apiname></xref> when
the index value passed to the operator is either negative or is greater than
or equal to the constant <codeph>KMaxCheckedUid</codeph> defined in <filepath>e32const.h</filepath>. </p> </entry>
</row>
<row>
<entry><p> <codeph>38</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Set(TDesC8&amp;)</codeph> member
function of <codeph>TCheckedUid</codeph> when the length of the descriptor
passed to the function is not equal to the size of a <codeph>TCheckedUid</codeph> object. </p> </entry>
</row>
<row>
<entry><p> <codeph>39</codeph>  </p> </entry>
<entry><p>This panic is raised when the size of a new heap is smaller than
the permitted minimum. It must be at least the size of an RHeap object. </p> <p>On
the user side this is associated with the USER category. On the kernel side
this is associated with the KERN-HEAP category. </p> </entry>
</row>
<row>
<entry><p> <codeph>41</codeph>  </p> </entry>
<entry><p>This panic is caused by the <xref href="GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01.dita#GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01/GUID-18A6B89B-4844-37E5-B46E-32188760A8C0"><apiname>UserHeap::ChunkHeap()</apiname></xref> static
function when the value defining the minimum length of the heap is greater
than the value defining the maximum length to which the heap can grow. </p> </entry>
</row>
<row>
<entry><p> <codeph>42</codeph>  </p> </entry>
<entry><p>This panic is raised by a number of <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> member
functions, <codeph>AllocLen()</codeph>, <codeph>Free()</codeph>, <codeph>FreeZ()</codeph>, <codeph>ReAlloc()</codeph>, <codeph>ReAllocL()</codeph>, <codeph>Adjust()</codeph> and <codeph>AdjustL()</codeph> when a pointer
passed to these functions does not point to a valid cell. </p> </entry>
</row>
<row>
<entry><p> <codeph>43</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Adjust()</codeph> and <codeph>AdjustL()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when a heap cell is
being shrunk and the amount by which the cell is being shrunk is less than
the current length of the cell. </p> </entry>
</row>
<row>
<entry><p> <codeph>44</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Free()</codeph> and <codeph>FreeZ()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when the cell being
freed overlaps the next cell on the free list (i.e. the first cell on the
free list with an address higher than the one being freed). </p> </entry>
</row>
<row>
<entry><p> <codeph>45</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Free()</codeph> and <codeph>FreeZ()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when the cell being
freed overlaps the previous cell on the free list (i.e. the last cell on the
free list with an address lower than the one being freed). </p> </entry>
</row>
<row>
<entry><p> <codeph>46</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>ReAlloc()</codeph> and <codeph>ReAllocL()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when the cell being
reallocated overlaps the next cell on the free list (i.e. the first cell on
the free list with an address higher than the one being reallocated). </p> </entry>
</row>
<row>
<entry><p> <codeph>47</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Alloc()</codeph>, <codeph>AllocL()</codeph> or <codeph>AllocLC()</codeph> member
functions of <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused by trying to allocate
a cell from a heap, specifying an unsigned size value which is greater than
or equal to the value of <codeph>KMaxTInt/2</codeph>. The constant <codeph>KMaxTInt</codeph> is
defined in the <filepath>e32const.h</filepath> file.</p> <p>This panic may
also be raised by the heap walker when it finds a bad allocated heap cell
size. </p> </entry>
</row>
<row>
<entry><p> <codeph>48</codeph>  </p> </entry>
<entry><p>This panic is raised by the heap walker when it finds a bad allocated
heap cell address. </p> </entry>
</row>
<row>
<entry><p> <codeph>49</codeph>  </p> </entry>
<entry><p>This panic is raised by the heap walker when it finds a bad free
heap cell address. </p> </entry>
</row>
<row>
<entry><p> <codeph>51</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the <codeph>DbgMarkEnd()</codeph> member function of <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> in
debug builds when there has been no corresponding call to the <codeph>DbgMarkStart()</codeph> member
function; it is also caused when there are more calls to <codeph>DbgMarkEnd()</codeph> than
to <codeph>DbgMarkStart()</codeph>. These functions are part of the debug
assistance provided by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> class. </p> </entry>
</row>
<row>
<entry><p> <codeph>52</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Adjust()</codeph> and <codeph>AdjustL()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when the offset from
the start of the cell being stretched or shrunk is a negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>54</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>ReAlloc()</codeph> and <codeph>ReAllocL()</codeph> member
functions of an <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref>. It is caused when the new size for
the cell being reallocated is a negative value. </p> </entry>
</row>
<row>
<entry><p> <codeph>55</codeph>  </p> </entry>
<entry><p>This panic is caused by the <xref href="GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01.dita#GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01/GUID-18A6B89B-4844-37E5-B46E-32188760A8C0"><apiname>UserHeap::ChunkHeap()</apiname></xref> static
function when the value defining the minimum length of the heap is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>56</codeph>  </p> </entry>
<entry><p>This panic is caused by the <xref href="GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01.dita#GUID-C5D0C7E7-061F-3BA5-AE24-B83237684B01/GUID-18A6B89B-4844-37E5-B46E-32188760A8C0"><apiname>UserHeap::ChunkHeap()</apiname></xref> static
function when the value defining the maximum length to which the heap can
grow, is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>57</codeph>  </p> </entry>
<entry><p>This panic is raised when closing a shared heap using the <codeph>Close()</codeph> member
function of <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> and the access count is zero or negative.
A zero or negative access count suggests that an attempt is being made to
close the heap too many times. </p> </entry>
</row>
<row>
<entry><p> <codeph>58</codeph>  </p> </entry>
<entry><p>This panic is raised when opening a heap for shared access using
the <codeph>Open()</codeph> member function of <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> and
the heap type is not <codeph>EChunkNormal</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>59</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>UnGet()</codeph> member function
of the 8-bit variant lexical analyzer, <xref href="GUID-5B7955BC-1375-35F1-953D-D7F5C3583756.dita"><apiname>TLex8</apiname></xref>, if the character
position is already at the start of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>60</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Inc()</codeph> member function
of the 8-bit variant lexical analyzer, <xref href="GUID-5B7955BC-1375-35F1-953D-D7F5C3583756.dita"><apiname>TLex8</apiname></xref>, if the resulting
character position lies before the start of the string or after the end of
the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>61</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>SkipAndMark()</codeph> member
function of the 8-bit variant lexical analyzer, <xref href="GUID-5B7955BC-1375-35F1-953D-D7F5C3583756.dita"><apiname>TLex8</apiname></xref>,
if the resulting character position lies before the start of the string or
after the end of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>63</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>ValidateMark()</codeph> member
function of the 8-bit variant lexical analyzer, <xref href="GUID-5B7955BC-1375-35F1-953D-D7F5C3583756.dita"><apiname>TLex8</apiname></xref>,
if the position of the extraction mark lies before the start of the string
or after the end of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>64</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>UnGet()</codeph> member function
of the 16-bit variant lexical analyzer, <xref href="GUID-76BFE569-34F7-3FEC-8F01-38AEC8C29D68.dita"><apiname>TLex16</apiname></xref>, if the
character position is already at the start of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>65</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Inc()</codeph> member function
of the 16-bit variant lexical analyzer, <xref href="GUID-76BFE569-34F7-3FEC-8F01-38AEC8C29D68.dita"><apiname>TLex16</apiname></xref>, if the
resulting character position lies before the start of the string or after
the end of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>66</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>SkipAndMark()</codeph> member
function of the 16-bit variant lexical analyzer, <xref href="GUID-76BFE569-34F7-3FEC-8F01-38AEC8C29D68.dita"><apiname>TLex16</apiname></xref>,
if the resulting character position lies before the start of the string or
after the end of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>68</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>ValidateMark()</codeph> member
function of the 16-bit variant lexical analyzer, <xref href="GUID-76BFE569-34F7-3FEC-8F01-38AEC8C29D68.dita"><apiname>TLex16</apiname></xref>,
if the position of the extraction mark lies before the start of the string
or after the end of the string. </p> </entry>
</row>
<row>
<entry><p> <codeph>69</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-E22ADC67-CEBC-3A6C-A507-EDB8C706476F.dita"><apiname>TDateSuffix</apiname></xref> constructor
or its <codeph>Set()</codeph> member function when the suffix index specified
is negative or is greater than or equal to the value <codeph>KMaxSuffixes</codeph> defined
in <filepath>e32const.h</filepath>. The index is used to access a locale dependent
table of suffix characters which can be appended to the dates of the month
(e.g. the characters "st" for 1st, "nd" for 2nd, "st" for 31st). </p> </entry>
</row>
<row>
<entry><p> <codeph>70</codeph>  </p> </entry>
<entry><p> <i>Introduced in 6.0:</i> This panic is raised when attempting
to complete a client/server request and the <codeph>RMessagePtr</codeph> is
null. </p> <p> <i>Withdrawn in 6.0:</i> This panic is raised by the <codeph>SetRetry()</codeph> member
function of <xref href="GUID-6D8A458C-9A39-3000-A3BC-060A2A3663E6.dita"><apiname>RSessionBase</apiname></xref>, the client interface for communication
with a server, when the specified delay time between resending a message to
the server is either negative or a value greater than KMaxTInt (defined in
the <filepath>e32const.h</filepath> file). </p> </entry>
</row>
<row>
<entry><p> <codeph>72</codeph>  </p> </entry>
<entry><p> <i>Withdrawn in 6.0:</i> This panic is raised by the <xref href="GUID-6D8A458C-9A39-3000-A3BC-060A2A3663E6.dita"><apiname>SetRetry</apiname></xref> member
function of <xref href="GUID-6D8A458C-9A39-3000-A3BC-060A2A3663E6.dita"><apiname>RSessionBase</apiname></xref>, the client interface for communication
with a server, when the specified operation code identifying the required
service is either negative or a value greater than <codeph>KMaxTInt</codeph> (defined
in the <filepath>e32const.h</filepath> file). </p> <p> <i>Introduced in 6.0:</i> This
panic is raised by the <codeph>Send()</codeph> and <codeph>SendReceive()</codeph> member
functions of <xref href="GUID-6D8A458C-9A39-3000-A3BC-060A2A3663E6.dita"><apiname>RSessionBase</apiname></xref>, the client interface for communication
with a server, when the specified operation code identifying the required
service is either negative or a value greater than <codeph>KMaxTInt</codeph> (defined
in the <filepath>e32const.h</filepath> file). </p> </entry>
</row>
<row>
<entry><p> <codeph>73</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Receive()</codeph> member function
of <codeph>RServer</codeph>, the handle to the server, when the attempt to
receive a message for the server, synchronously, fails. </p> </entry>
</row>
<row>
<entry><p> <codeph>75</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of a singly linked list
header, a <xref href="GUID-40BA1263-BE07-3C7F-955E-0BBC632E7C58.dita"><apiname>TSglQue</apiname></xref> or by the <codeph>SetOffset()</codeph> member
function when the specified offset is not 4 byte aligned, i.e. when it is
not divisible by 4. </p> </entry>
</row>
<row>
<entry><p> <codeph>76</codeph>  </p> </entry>
<entry><p>This panic is raised when attempting to remove an object from a
singly linked list, using the <codeph>Remove()</codeph> member function of <xref href="GUID-40BA1263-BE07-3C7F-955E-0BBC632E7C58.dita"><apiname>TSglQue</apiname></xref>,
when that object is not in the list. </p> </entry>
</row>
<row>
<entry><p> <codeph>78</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of a doubly linked list
header, a <xref href="GUID-E5E9834A-63CA-3F03-88D3-85B912ADA54C.dita"><apiname>TDblQue</apiname></xref> or by the <codeph>SetOffset()</codeph> member
function, when the specified offset is not 4 byte aligned, i.e. when it is
not divisible by 4. </p> </entry>
</row>
<row>
<entry><p> <codeph>79</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by a call to either the <codeph>First()</codeph> and <codeph>Last()</codeph> member
functions of a doubly linked list, a <xref href="GUID-E5E9834A-63CA-3F03-88D3-85B912ADA54C.dita"><apiname>TDblQue</apiname></xref>, which return
pointers to the first and last element in the list respectively; the panic
occurs when the list is empty. </p> </entry>
</row>
<row>
<entry><p> <codeph>80</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised by the post increment operator, <codeph>operator++</codeph>, the post
decrement operator, <codeph>operator—</codeph> and the return current element
operator, <codeph>operator T*</codeph>, of the doubly linked list iterator,
a <xref href="GUID-46C6F8E4-C7B5-39B2-A9E6-F022A924FF8C.dita"><apiname>TDblQueIter</apiname></xref>; the panic occurs when the element returned
by these operators is not in the list. Typically, this is caused by the removal
of the element from the list prior to calling these operators. </p> </entry>
</row>
<row>
<entry><p> <codeph>81</codeph>  </p> </entry>
<entry><p>This panic is raised by the get rectangle operator, <codeph>operator[]</codeph>,
of a clipping region, derived from the abstract base class <xref href="GUID-740A218E-76FB-31BF-BD91-BA6780AC4DEE.dita"><apiname>TRegion</apiname></xref>.
The panic occurs when the index, which refers to the specific rectangle within
the region, is greater than or equal to the number of rectangles contained
within the region (as returned by the <codeph>Count()</codeph> member function). </p> <p>The
index must be strictly less than the number of contained rectangles. </p> </entry>
</row>
<row>
<entry><p> <codeph>82</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>It is
raised when sorting the rectangles within a clipping region, derived from
the abstract base class <xref href="GUID-740A218E-76FB-31BF-BD91-BA6780AC4DEE.dita"><apiname>TRegion</apiname></xref>, using the <codeph>Sort()</codeph> member
function of <xref href="GUID-740A218E-76FB-31BF-BD91-BA6780AC4DEE.dita"><apiname>TRegion</apiname></xref>. The panic occurs when the region is
invalid. </p> </entry>
</row>
<row>
<entry><p> <codeph>83</codeph>  </p> </entry>
<entry><p>This panic occurs when the Kernel sends a message to the Kernel
server and this completes with an error, i.e. an error code which is not <codeph>KErrNone</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>84</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Panic()</codeph> member function
of <codeph>RTest</codeph>, the test class. </p> </entry>
</row>
<row>
<entry><p> <codeph>85</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>CheckConsoleCreated()</codeph> member
functions of <codeph>RTest</codeph> and <codeph>RTestJ</codeph>, the test
classes, when the creation of a console, as derived from a <codeph>CConsoleBase</codeph>,
fails. </p> </entry>
</row>
<row>
<entry><p> <codeph>86</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita#GUID-C197C9A7-EA05-3F24-9854-542E984C612D/GUID-4FDD3CEB-9D30-33BD-BAF3-14A1E2D56B18"><apiname>User::After()</apiname></xref> static
function which is used to suspend the current thread until the specified time
interval, in microseconds, has expired. The panic occurs when the specified
time interval is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>87</codeph>  </p> </entry>
<entry><p>This panic is raised when a relative timer event is requested from
an asynchronous timer service, an <xref href="GUID-8A423EA2-4264-30C9-9579-0466994E6E88.dita"><apiname>RTimer</apiname></xref>, using the <codeph>After()</codeph> member
function. The panic occurs when the requested time interval is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>88</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-CA07367C-D2AC-32AE-9614-A93DE2A146A7"><apiname>Mem::Compare()</apiname></xref>, <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-95543372-DF95-37C1-BDF0-AF760B3C7157"><apiname>Mem::CompareC()</apiname></xref> and <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-BB1F7591-D0AD-3722-A25E-9D828EA19515"><apiname>Mem::CompareF()</apiname></xref>,
which compare two areas of memory. The panic occurs when the length of the
area of memory designated as the left hand area, is negative. </p> <p>On the
user side this is associated with the USER category. On the kernel side this
is associated with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>89</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-CA07367C-D2AC-32AE-9614-A93DE2A146A7"><apiname>Mem::Compare()</apiname></xref>, <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-95543372-DF95-37C1-BDF0-AF760B3C7157"><apiname>Mem::CompareC()</apiname></xref> and <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-BB1F7591-D0AD-3722-A25E-9D828EA19515"><apiname>Mem::CompareF()</apiname></xref>,
which compare two areas of memory. The panic occurs when the length of the
area of memory designated as the right hand area, is negative. </p> <p>On
the user side this is associated with the USER category. On the kernel side
this is associated with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>90</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-4D71DFF1-F113-3BBB-B607-AF61E8234307"><apiname>Mem::Copy()</apiname></xref>, which copies the content
of one area of memory to another. The panic occurs when the length of the
area of memory to be copied, is negative </p> <p>On the user side this is
associated with the USER category. On the kernel side this is associated with
the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>91</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-183CDC27-56F1-371A-A9C5-730118788C86"><apiname>Mem::Move()</apiname></xref>, which moves the content
of one area of memory to another. The panic occurs when the length of the
area of memory to be moved, is not a multiple of 4. </p> <p>On the user side
this is associated with the USER category. On the kernel side this is associated
with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>92</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <codeph>Mem::Move()</codeph>, which moves the content of
one area of memory to another. The panic occurs when the address of the source
for the move operation, is not aligned on a 4 byte boundary. </p> <p>On the
user side this is associated with the USER category. On the kernel side this
is associated with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>93</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <codeph>Mem::Move()</codeph>, which moves the content of
one area of memory to another. The panic occurs when the address of the target
for the move operation, is not aligned on a 4 byte boundary. </p> <p>On the
user side this is associated with the USER category. On the kernel side this
is associated with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>94</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-A94B5FEC-4DFA-308F-9154-840BC848F162"><apiname>Mem::Swap()</apiname></xref>, which swaps the content
of one area of memory with another. The panic occurs when the length of the
area of memory to be swapped, is negative. </p> <p>On the user side this is
associated with the USER category. On the kernel side this is associated with
the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>95</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-756045AC-3C85-3642-B24B-68B655B140B9"><apiname>Mem::Fill()</apiname></xref> and <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-CFDAFF27-A7F5-378C-AC60-6F46CE62B01E"><apiname>Mem::FillZ()</apiname></xref>,
both of which fill an area of memory. The panic occurs when the length of
the area of memory to be filled, is negative. </p> <p>On the user side this
is associated with the USER category. On the kernel side this is associated
with the KERN-COMMON category. </p> </entry>
</row>
<row>
<entry><p> <codeph>96</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita#GUID-C197C9A7-EA05-3F24-9854-542E984C612D/GUID-10E209B9-A010-322B-A3BC-2DE9849C418A"><apiname>User::QuickSort()</apiname></xref>, when
the value for the number of records to be sorted, is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>97</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita#GUID-C197C9A7-EA05-3F24-9854-542E984C612D/GUID-3A8F5EDE-4A8D-33A2-8B43-63F04C59F548"><apiname>User::BinarySearch()</apiname></xref>,
when the value for the number of records taking part in the search, is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>98</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the base key class, <xref href="GUID-0756A649-486C-3CE5-9F1E-467E008A63C7.dita"><apiname>TKey</apiname></xref>.
It occurs when the offset value passed to the constructor is negative.As <codeph>TKey</codeph> is
an abstract class, i.e. objects of type <codeph>TKey</codeph> are not intended
to be explicitly constructed, look at the offset value passed to the constructors
of derived classes such as <xref href="GUID-5BC09594-7D9F-3B3F-95B0-7828A756537B.dita"><apiname>TKeyArrayFix</apiname></xref>, <xref href="GUID-03CE0E0B-3731-338A-87E4-49B669AD4EBC.dita"><apiname>TKeyArrayVar</apiname></xref> and <xref href="GUID-F3BF9485-BA32-36A4-9B39-FC51E28F5A24.dita"><apiname>TKeyArrayPak</apiname></xref> for
the cause of the panic. </p> </entry>
</row>
<row>
<entry><p> <codeph>99</codeph>  </p> </entry>
<entry><p>This panic is raised when a local or global chunk is created using
the <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> member functions: <codeph>CreateLocal()</codeph>, <codeph>CreateGlobal()</codeph>, <codeph>CreateDoubleEndedLocal()</codeph> and <codeph>CreateDoubleEndedGlobal()</codeph>. It occurs when the value
for the maximum size to which this chunk can be adjusted, is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>100</codeph>  </p> </entry>
<entry><p>This panic is raised when a local or global chunk is created using
the <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> member functions: <codeph>CreateLocal()</codeph> and <codeph>CreateGlobal()</codeph>.
It occurs when the value for the number of bytes to be committed to this chunk
on creation, is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>101</codeph>  </p> </entry>
<entry><p>This panic is raised when a local or global chunk is created using
the <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> member functions: <codeph>CreateLocal()</codeph> and <codeph>CreateGlobal()</codeph>.
It occurs when the value for the number of bytes to be committed to this chunk
on creation is greater than the value for the maximum size to which this chunk
can be adjusted. </p> </entry>
</row>
<row>
<entry><p> <codeph>102</codeph>  </p> </entry>
<entry><p>This panic is raised when changing the number of bytes committed
to a chunk by calling the <codeph>Adjust()</codeph> member function of <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref>.
The panic occurs when the value passed to the function is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>105</codeph>  </p> </entry>
<entry><p>This panic is raised when a local or global semaphore is created
using the <xref href="GUID-AED27A76-3645-3A04-B80D-10473D9C5A27.dita"><apiname>RSemaphore</apiname></xref> member functions: <codeph>CreateLocal()</codeph> and <codeph>CreateGlobal()</codeph>.
It occurs when the value for the initial semaphore count is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>106</codeph>  </p> </entry>
<entry><p>This panic is raised when a semaphore, an <xref href="GUID-AED27A76-3645-3A04-B80D-10473D9C5A27.dita"><apiname>RSemaphore</apiname></xref>,
is signaled using the <codeph>Signal(TInt aCount)</codeph> member function
and the count value is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>107</codeph>  </p> </entry>
<entry><p>This panic is raised when a critical section, an <xref href="GUID-FC5F1EC1-28CC-3B06-83C4-B90EF8EEBA07.dita"><apiname>RCriticalSection</apiname></xref>,
is signalled using the <codeph>Signal()</codeph> member function. The panic
occurs when the <codeph>Signal()</codeph> is not matched by an earlier call
to <codeph>Wait()</codeph> and suggests that this is a stray signal. </p> </entry>
</row>
<row>
<entry><p> <codeph>109</codeph>  </p> </entry>
<entry><p>This panic is raised when creating a thread using the <codeph>Create()</codeph> member
functions of <xref href="GUID-B0E661BC-4058-3256-B9C3-5A4FD52F6DE5.dita"><apiname>RThread</apiname></xref>. The panic occurs when the value of
the stack size passed to these functions is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>110</codeph>  </p> </entry>
<entry><p>This panic is raised when creating a thread using the <codeph>Create()</codeph> member
functions of <xref href="GUID-B0E661BC-4058-3256-B9C3-5A4FD52F6DE5.dita"><apiname>RThread</apiname></xref>. The panic is only raised by those
variants of <codeph>Create()</codeph> which create a new heap for the new
thread. The panic occurs if the minimum heap size specified is less than <codeph>KMinHeapSize</codeph> ,
defined in <filepath>e32const.h</filepath>. </p> </entry>
</row>
<row>
<entry><p> <codeph>111</codeph>  </p> </entry>
<entry><p>This panic is raised when creating a thread using the <codeph>Create()</codeph> member
functions of <xref href="GUID-B0E661BC-4058-3256-B9C3-5A4FD52F6DE5.dita"><apiname>RThread</apiname></xref>. The panic is only raised by those
variants of <codeph>Create()</codeph> which create a new heap for the new
thread. The panic occurs if the minimum heap size specified is greater than
the maximum size to which the heap can grow </p> </entry>
</row>
<row>
<entry><p> <codeph>112</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Alloc()</codeph> and <codeph>AllocL()</codeph> member
functions of class <codeph>RRef</codeph> when the size value passed is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>113</codeph>  </p> </entry>
<entry><p>This panic is raised by: </p> <ul>
<li id="GUID-14612F2D-C196-581C-9267-4C2C6FA64781"><p>the constructor of a
time representation object, a <xref href="GUID-A2D3BA72-9B27-3BFF-950A-D7E3B2004821.dita"><apiname>TTime</apiname></xref>, which takes a text
string, when the format of that text string is incorrect or represents an
invalid date or time. </p> </li>
<li id="GUID-CAB02981-302B-5E54-B355-F46C96E6361B"><p>the <codeph>Parse()</codeph> member
function of a time representation object, a <xref href="GUID-A2D3BA72-9B27-3BFF-950A-D7E3B2004821.dita"><apiname>TTime</apiname></xref>, if the
century offset value is either negative or is greater than or equal to 100. </p> </li>
<li id="GUID-04DE18E4-5FBC-5DDF-9468-8A218B98D366"><p>the <xref href="GUID-B81A50BE-2045-3040-A5DD-D5DE03B52FCC.dita#GUID-B81A50BE-2045-3040-A5DD-D5DE03B52FCC/GUID-B0669C9C-81F3-3F85-8F9C-545F0011C33D"><apiname>Time::DaysInMonth()</apiname></xref> function,
if an invalid month value is passed. </p> </li>
</ul> </entry>
</row>
<row>
<entry><p> <codeph>114</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised by member functions of a <codeph>TBusLocalDrive</codeph> when
no connection has been made to a local drive. </p> </entry>
</row>
<row>
<entry><p> <codeph>115</codeph>  </p> </entry>
<entry><p>This panic is raised when attempting to connect to a local drive
using the <codeph>Connect()</codeph> member function of <codeph>TBusLocalDrive</codeph> and
the specified drive number is out of range, i.e. the drive number is negative
or is greater than or equal to <codeph>KMaxLocalDrives</codeph>, defined in <filepath>e32const.h</filepath>. </p> </entry>
</row>
<row>
<entry><p> <codeph>116</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>Lookup()</codeph> member function
of an <xref href="GUID-25327159-83D6-3507-B187-09EA4BB3727F.dita"><apiname>RLibrary</apiname></xref>, a handle to a dynamically loaded DLL, when
the ordinal number of the required DLL function, is zero or negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>119</codeph>  </p> </entry>
<entry><p>This panic is raised when setting a new currency symbol using the <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita#GUID-C197C9A7-EA05-3F24-9854-542E984C612D/GUID-1CBBEEF4-0E5A-33AB-833F-6AF14BA57793"><apiname>User::SetCurrencySymbol()</apiname></xref> function.
The panic occurs when the length of the descriptor containing the new symbol
is greater than <codeph>KMaxCurrencySymbol</codeph>, defined in <filepath>e32const.h</filepath>. </p> </entry>
</row>
<row>
<entry><p> <codeph>120</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>CreateDoubleEndedLocal()</codeph> and <codeph>CreateDoubleEndedGlobal()</codeph> member
functions of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the lower address of the committed
region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>121</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>CreateDoubleEndedLocal()</codeph> and <codeph>CreateDoubleEndedGlobal()</codeph> member
functions of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the upper address of the committed
region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>122</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>CreateDoubleEndedLocal()</codeph> and <codeph>CreateDoubleEndedGlobal()</codeph> member
functions of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the upper address of the committed
region is lower than the lower address of the committed region. </p> </entry>
</row>
<row>
<entry><p> <codeph>123</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>CreateDoubleEndedLocal()</codeph> and <codeph>CreateDoubleEndedGlobal()</codeph> member
functions of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the upper address of the committed
region is lower than the maximum size to which this chunk can be adjusted. </p> </entry>
</row>
<row>
<entry><p> <codeph>124</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>AdjustDoubleEnded()</codeph> member
function of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the lower address of the committed
region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>125</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>AdjustDoubleEnded()</codeph> member
function of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the upper address of the committed
region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>126</codeph>  </p> </entry>
<entry><p>This panic is raised by the <codeph>AdjustDoubleEnded()</codeph> member
function of an <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref> when the upper address of the committed
region is lower than the lower address of the committed region. </p> </entry>
</row>
<row>
<entry><p> <codeph>127</codeph>  </p> </entry>
<entry><p>This panic is raised when constructing an array of pointers, an <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref>,
and specifying a granularity value which is one of the following: </p> <ul>
<li id="GUID-997727C6-9CF0-55C7-8C2B-F40256F219CA"><p>zero </p> </li>
<li id="GUID-BB3784C6-48A0-5429-91C6-3E4005CBFED7"><p>negative </p> </li>
<li id="GUID-9E7805F2-F54B-5561-935A-59833A4D316F"><p>greater than <codeph>0x10000000</codeph>. </p> </li>
</ul> </entry>
</row>
<row>
<entry><p> <codeph>128</codeph>  </p> </entry>
<entry><p>This panic is raised when constructing an array of fixed length
objects, an <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref>, and specifying a key offset value which
is one of the following: </p> <ul>
<li id="GUID-5F2D3E80-1309-5D55-B6C7-79F2896B5CB4"><p>negative </p> </li>
<li id="GUID-8C8C2026-3ED3-5232-9AEC-4CB2E29B9EF1"><p>not a multiple of 4 </p> </li>
<li id="GUID-EB846DEE-DEDD-5AB8-849D-6FF84BFA868D"><p>greater than or equal
to the size of the array elements. </p> </li>
</ul> </entry>
</row>
<row>
<entry><p> <codeph>129</codeph>  </p> </entry>
<entry><p>This panic is raised when constructing an array of fixed length
objects, an <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref>, and the length of the array elements
is one of the following: </p> <ul>
<li id="GUID-5E6B0011-2AB7-5FB4-9480-0243215673AD"><p>zero </p> </li>
<li id="GUID-BE7CE556-9091-5A04-A516-E858DCB9DEB2"><p>negative </p> </li>
<li id="GUID-08D5D804-B78E-5398-9FBE-49EE5BA5BEF6"><p>greater than 640. </p> </li>
</ul> </entry>
</row>
<row>
<entry><p> <codeph>130</codeph>  </p> </entry>
<entry><p>This panic is raised when an index value passed to a member function
of a <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref> or a <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref> identifying
an array element, is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>131</codeph>  </p> </entry>
<entry><p>This panic is raised when the value identifying the insertion position
in a call to <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita#GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707/GUID-774BDED5-F7E6-3AC9-822B-61DC9E39096B"><apiname>RArray::Insert()</apiname></xref> or <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita#GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F/GUID-AF0E69AA-CAE9-3826-8256-7315688CD641"><apiname>RPointerArray::Insert()</apiname></xref> is
either negative or greater than the number of elements in the array. </p> </entry>
</row>
<row>
<entry><p> <codeph>132</codeph>  </p> </entry>
<entry><p>This panic is raised when an index value passed to <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-EBFD358A-62B6-30F5-9C40-ED551268A164"><apiname>Mem::CollationMethodByIndex()</apiname></xref> or <xref href="GUID-677B3729-EDED-341B-BE83-59F4386CCCA4.dita#GUID-677B3729-EDED-341B-BE83-59F4386CCCA4/GUID-51C05CAE-3FCC-3931-91B4-5E52B9A0777C"><apiname>Mem::CollationMethodId()</apiname></xref> is out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>133</codeph>  </p> </entry>
<entry><p>This panic is raised when an index value passed to <xref href="GUID-1EC847DC-6858-3BEE-A5B2-F7737F1D50AD.dita#GUID-1EC847DC-6858-3BEE-A5B2-F7737F1D50AD/GUID-76B36CE0-9DB3-32B1-8F91-D94ACB53A606"><apiname>TFixedArray::At()</apiname></xref> or <xref href="GUID-1EC847DC-6858-3BEE-A5B2-F7737F1D50AD.dita#GUID-1EC847DC-6858-3BEE-A5B2-F7737F1D50AD/GUID-B64C2CF6-7A4D-3306-BCA7-205BE0F1FD14"><apiname>TFixedArray::operator()</apiname></xref> is
out of bounds. </p> </entry>
</row>
<row>
<entry><p> <codeph>137</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. The panic is caused when
a parameter is too big. </p> </entry>
</row>
<row>
<entry><p> <codeph>138</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists when an index value for
the parameters is outside its permitted range. </p> </entry>
</row>
<row>
<entry><p> <codeph>139</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised internally by the descriptor formatting functions during the
handling of the variable parameter lists when an index value for the parameters
is outside its permitted range. </p> </entry>
</row>
<row>
<entry><p> <codeph>140</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>141</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>142</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>143</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>144</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>145</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>146</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>147</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>148</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>149</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>150</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>151</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>152</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>153</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>154</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>156</codeph>  </p> </entry>
<entry><p>This panic is raised by the variants of the <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref> or <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref> constructors
that take a value that defines the number of entries for the array. The panic
is caused when this number is not positive. </p> </entry>
</row>
<row>
<entry><p> <codeph>157</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita#GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07/GUID-808FE749-13D0-3E88-879A-7482174D4590"><apiname>RChunk::Commit()</apiname></xref> when
the value of the offset of the committed region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>158</codeph>  </p> </entry>
<entry><p>This panic is raised by <codeph>RChunk::Commit()</codeph> when the
size of the committed region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>159</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita#GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07/GUID-46A8D42E-68E5-370F-9062-C419804BA0A9"><apiname>RChunk::Allocate()</apiname></xref> when
the size of the committed region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>160</codeph>  </p> </entry>
<entry><p>This panic is raised by <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita#GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07/GUID-7B5EB813-48D2-371B-84CF-DBDA31382480"><apiname>RChunk::Decommit()</apiname></xref> when
the value of the offset of the committed region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>161</codeph>  </p> </entry>
<entry><p>This panic is raised by <codeph>RChunk::Decommit()</codeph> when
the size of the committed region is negative. </p> </entry>
</row>
<row>
<entry><p> <codeph>162</codeph>  </p> </entry>
<entry><p>This panic is raised when an invalid chunk type is passed to the
internal <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita#GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07/GUID-EA7C4105-6D64-3F87-83B6-C97DCDEDB94A"><apiname>RChunk::Create()</apiname></xref> member function  </p> <p>See <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref>  </p> </entry>
</row>
<row>
<entry><p> <codeph>163</codeph>  </p> </entry>
<entry><p>This panic is raised when a global chunk is being created and no
name has been specified. </p> <p>See <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref>  </p> </entry>
</row>
<row>
<entry><p> <codeph>164</codeph>  </p> </entry>
<entry><p>This panic is raised when creating a 'normal' chunk, and the offset
of the bottom of the new committed region from the base of the chunk's reserved
region is not zero. </p> <p>See <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita"><apiname>RChunk</apiname></xref>  </p> </entry>
</row>
<row>
<entry><p> <codeph>165</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-25327159-83D6-3507-B187-09EA4BB3727F.dita#GUID-25327159-83D6-3507-B187-09EA4BB3727F/GUID-1D1AC9B1-4E3E-32AC-8D88-7F48E9C1599F"><apiname>RLibrary::Init()</apiname></xref> internal
function when the function that constructs static data following a DLL load,
leaves. </p> <p>See <xref href="GUID-25327159-83D6-3507-B187-09EA4BB3727F.dita"><apiname>RLibrary</apiname></xref>  </p> </entry>
</row>
<row>
<entry><p> <codeph>166</codeph>  </p> </entry>
<entry><p>This panic is raised internally, if a call to the static data destructors,
following closure of a library handle, leaves. </p> </entry>
</row>
<row>
<entry><p> <codeph>167</codeph>  </p> </entry>
<entry><p>This panic is raised in a call to <xref href="GUID-9DB4A58C-6FC8-3292-A547-4C161BD188FC.dita#GUID-9DB4A58C-6FC8-3292-A547-4C161BD188FC/GUID-DF3C2502-B4A7-3088-A22D-B8F0D2194E90"><apiname>RAllocator::Close()</apiname></xref> when
the number of handles is found to be greater than the maximum allowed, i.e. <xref href="GUID-9DB4A58C-6FC8-3292-A547-4C161BD188FC.dita#GUID-9DB4A58C-6FC8-3292-A547-4C161BD188FC/GUID-4B385121-25B9-376D-88C9-6AE22209AA6E"><apiname>RAllocator::EMaxHandles</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>168</codeph>  </p> </entry>
<entry><p>This panic is raised by the internal <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita"><apiname>RHeap</apiname></xref> constructor
when the offset value is invalid, i.e. is negative or not appropriate for
the pagesize. </p> </entry>
</row>
<row>
<entry><p> <codeph>169</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita#GUID-EFAFDD75-7E59-306A-882D-317F5564979E/GUID-16924B79-4096-3E48-9443-DB944FA86987"><apiname>RHeap::Reduce()</apiname></xref> internal
function on failure. </p> </entry>
</row>
<row>
<entry><p> <codeph>170</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita#GUID-EFAFDD75-7E59-306A-882D-317F5564979E/GUID-75FFFB70-077B-3CC4-B7DE-D2362027E308"><apiname>RHeap::Reset()</apiname></xref> internal
function on failure. </p> </entry>
</row>
<row>
<entry><p> <codeph>171</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita#GUID-EFAFDD75-7E59-306A-882D-317F5564979E/GUID-06F144EE-5E27-3E1E-8FD9-69C86D302596"><apiname>RHeap::WalkCheckCell()</apiname></xref> internal
function if it detects a free cell with an invalid size. </p> </entry>
</row>
<row>
<entry><p> <codeph>172</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita#GUID-EFAFDD75-7E59-306A-882D-317F5564979E/GUID-04B92045-A5D4-329D-9806-D3689711E5C3"><apiname>RHeap::Initialise()</apiname></xref> internal
function when an alignment value is invalid, i.e is either less than the size
of a <codeph>TAny*</codeph> type, or is not a power of 2 (i.e. 2, 4, 8, 16
etc). </p> </entry>
</row>
<row>
<entry><p> <codeph>174</codeph>  </p> </entry>
<entry><p>This panic is raised if any not implemented pure virtual function
is called. </p> </entry>
</row>
<row>
<entry><p> <codeph>175</codeph>  </p> </entry>
<entry><p>This panic is raised when a <xref href="GUID-C197C9A7-EA05-3F24-9854-542E984C612D.dita#GUID-C197C9A7-EA05-3F24-9854-542E984C612D/GUID-ABF0FC5C-3334-3761-893D-D836B2EE0541"><apiname>User::Leave()</apiname></xref> function
is called and there is no <xref href="GUID-3F2CDC74-2568-371C-9D8E-34A66A619226.dita"><apiname>TRAP</apiname></xref> frame. </p> </entry>
</row>
<row>
<entry><p> <codeph>176</codeph>  </p> </entry>
<entry><p>This panic is raised when a mathematical function fails with an
unrecognized exception, i.e. one that is none of: <xref href="GUID-0BEA3647-7888-3612-A2D3-7E27AC405E29.dita"><apiname>KErrArgument</apiname></xref>, <xref href="GUID-E06EBEEF-8BED-3143-9136-5F4F3B55D882.dita"><apiname>KErrDivideByZero</apiname></xref>, <xref href="GUID-F9E0EF8B-4EF5-3E35-811A-00B8F9CCF2FA.dita"><apiname>KErrOverflow</apiname></xref> or <xref href="GUID-3673F75F-655F-3561-BD56-F7E1C6980810.dita"><apiname>KErrUnderflow</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>177</codeph>  </p> </entry>
<entry><p>This panic is raised by the <xref href="GUID-EFAFDD75-7E59-306A-882D-317F5564979E.dita#GUID-EFAFDD75-7E59-306A-882D-317F5564979E/GUID-06F144EE-5E27-3E1E-8FD9-69C86D302596"><apiname>RHeap::WalkCheckCell()</apiname></xref> internal
function on a bad cell type. </p> </entry>
</row>
<row>
<entry><p> <codeph>178</codeph>  </p> </entry>
<entry><p>This panic is raised when descriptors convert integers into text,
and an invalid radix is passed, i.e. a value that is not one of the <xref href="GUID-3223CE28-D0EF-350A-874B-EF25140F4DA2.dita"><apiname>TRadix</apiname></xref> enum
values. </p> </entry>
</row>
<row>
<entry><p> <codeph>179</codeph>  </p> </entry>
<entry><p> <i>This panic is raised in debug builds only.</i>  </p> <p>This
panic is raised when converting and appending numbers in descriptors, and
buffers are not aligned on even addresses. </p> </entry>
</row>
<row>
<entry><p> <codeph>181</codeph>  </p> </entry>
<entry><p>This is raised by an internal component related to Huffman encoding
or decoding.</p> </entry>
</row>
<row>
<entry><p> <codeph>182</codeph>  </p> </entry>
<entry><p>This is raised by an internal component related to Huffman encoding
or decoding.</p> </entry>
</row>
<row>
<entry><p> <codeph>183</codeph>  </p> </entry>
<entry><p>This panic is raised by member functions of the internal classes <codeph>RArrayBase</codeph> and <codeph>RPointerArrayBase</codeph>;
specifically: </p> <ul>
<li id="GUID-873F4160-2007-5B5B-B709-7E7A7F341439"><p> <codeph> RArrayBase::BinarySearch()</codeph>  </p> </li>
<li id="GUID-FB620C5B-0868-57E8-B1BA-073361A610F9"><p> <codeph>RArrayBase::BinarySearchUnsigned()</codeph>  </p> </li>
<li id="GUID-899B5E5D-85EA-5A12-9831-E3D7FA7C60CE"><p> <codeph>RArrayBase::BinarySearchSigned()</codeph>  </p> </li>
<li id="GUID-6BA9A5BE-ECAC-5235-8CCE-1F4AA298586B"><p> <codeph>RPointerArrayBase::BinarySearch()</codeph>  </p> </li>
<li id="GUID-F72C47DF-F1C4-548E-B311-A718D0A62CC9"><p> <codeph>RPointerArrayBase::BinarySearchUnsigned()</codeph>  </p> </li>
<li id="GUID-9783A227-F9BF-590E-82BF-91582EBE6B5C"><p> <codeph>RPointerArrayBase::BinarySearchSigned()</codeph>  </p> </li>
</ul> <p>when the find mode passed to these functions is not recognized. </p> </entry>
</row>
<row>
<entry><p> <codeph>184</codeph>  </p> </entry>
<entry><p>This panic is raised on a call to <xref href="GUID-A6B66713-FECA-3BE7-BB81-1AE5551AD83D.dita#GUID-A6B66713-FECA-3BE7-BB81-1AE5551AD83D/GUID-6DDAC4CD-9418-3291-9B03-6C0EE5AEB689"><apiname>RNotifier::Notify()</apiname></xref> when
the length of one or more of the descriptors containing the displayable text
is bigger than the maximum value that a <xref href="GUID-4BB532F8-938E-37C7-9D40-6010EB716E7A.dita"><apiname>TUint16</apiname></xref> can hold. </p> </entry>
</row>
<row>
<entry><p> <codeph>185</codeph>  </p> </entry>
<entry><p>This panic is raised by the following functions when the month or
day value is outside its permitted range of values: </p> <ul>
<li id="GUID-814D9C36-CFE1-5C52-82DC-9A106DEB7562"><p> <xref href="GUID-98B3912D-84FC-3BD8-B1F0-1FF965C67D24.dita#GUID-98B3912D-84FC-3BD8-B1F0-1FF965C67D24/GUID-7B20F2D3-B50F-3D07-AB5E-0576B7504E58"><apiname>TMonthName::Set()</apiname></xref>  </p> </li>
<li id="GUID-BFCB66DB-0F05-52ED-8537-BD6CAEDE7317"><p> <xref href="GUID-B7905793-30B6-3351-8351-D239F4CB660A.dita#GUID-B7905793-30B6-3351-8351-D239F4CB660A/GUID-44E83EB0-2B34-3A27-9D50-D2BE8BFA7D6A"><apiname>TMonthNameAbb::Set()</apiname></xref>  </p> </li>
<li id="GUID-60397C89-DD2A-557F-BCFE-3ACA13AD48BC"><p> <xref href="GUID-9F97BDB2-F684-33D1-9B4A-C46425833F59.dita#GUID-9F97BDB2-F684-33D1-9B4A-C46425833F59/GUID-3B5BDDCB-9F15-3A8E-B3B1-9E7E38302826"><apiname>TDayName::Set()</apiname></xref>  </p> </li>
<li id="GUID-FD2F89D4-FEE6-5C8C-9909-A143965A59B1"><p> <xref href="GUID-9BF9626A-0535-3E70-BFD8-B12505BD934F.dita#GUID-9BF9626A-0535-3E70-BFD8-B12505BD934F/GUID-1D487B9E-1978-30D5-83DF-CD6F8E4A1344"><apiname> TDayNameAbb::Set()</apiname></xref>  </p> </li>
</ul> <p>See also: <xref href="GUID-98B3912D-84FC-3BD8-B1F0-1FF965C67D24.dita"><apiname>TMonthName</apiname></xref>, <xref href="GUID-B7905793-30B6-3351-8351-D239F4CB660A.dita"><apiname>TMonthNameAbb</apiname></xref>, <xref href="GUID-9F97BDB2-F684-33D1-9B4A-C46425833F59.dita"><apiname>TDayName</apiname></xref> and <xref href="GUID-9BF9626A-0535-3E70-BFD8-B12505BD934F.dita"><apiname>TDayNameAbb</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>186</codeph>  </p> </entry>
<entry><p>This panic is raised internally by the descriptor formatting functions
during the handling of the variable parameter lists. </p> </entry>
</row>
<row>
<entry><p> <codeph>187</codeph>  </p> </entry>
<entry><p>This panic is raised in a call to <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita#GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507/GUID-217E8A68-3A69-35A2-9E44-309ADD992F98"><apiname>TDes8::Expand()</apiname></xref>,
if either the length, or the maximum length, or the pointer to the data is
not an even number. </p> </entry>
</row>
<row>
<entry><p> <codeph>188</codeph>  </p> </entry>
<entry><p>This panic is raised in a call to <xref href="GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507.dita#GUID-445B19E5-E2EE-32E2-8D6C-C7D6A9B3C507/GUID-F783E13D-749C-3BCB-9AF1-55411D0B8EE7"><apiname>TDes8::Collapse()</apiname></xref>,
if either the length, or the maximum length, or the pointer to the data is
not an even number. </p> </entry>
</row>
<row>
<entry><p> <codeph>189</codeph>  </p> </entry>
<entry><p>This panic is raised in calls to the <xref href="GUID-81A285F6-3F87-3E77-9426-61BB16BC7109.dita"><apiname>TSecurityPolicy</apiname></xref> constructors,
if the specified capability is found to be invalid. </p> <p>See <xref href="GUID-604DA570-08AC-300D-A7CE-1DA984556B10.dita"><apiname>TCapability</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>190</codeph>  </p> </entry>
<entry><p>This panic is raised in a call to <xref href="GUID-81A285F6-3F87-3E77-9426-61BB16BC7109.dita#GUID-81A285F6-3F87-3E77-9426-61BB16BC7109/GUID-E155171A-D096-3C75-9DB9-974F23D753AA"><apiname>TSecurityPolicy::CheckPolicy()</apiname></xref>,
if the security policy is found to be corrupt. </p> <p>See <xref href="GUID-81A285F6-3F87-3E77-9426-61BB16BC7109.dita"><apiname>TSecurityPolicy</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>191</codeph>  </p> </entry>
<entry><p>This panic is raised in a call to: </p> <codeblock id="GUID-E9725190-B3E4-5A1D-9728-CAF8F3BE5DF3" xml:space="preserve">TSecurityPolicy::TSecurityPolicy(TSecPolicyType aType)</codeblock> <p>if <codeph>aType</codeph> is neither <codeph>ETypePass</codeph> nor <codeph>ETypeFail</codeph>. </p> <p>See <xref href="GUID-81A285F6-3F87-3E77-9426-61BB16BC7109.dita"><apiname>TSecurityPolicy</apiname></xref>. </p> </entry>
</row>
<row>
<entry><p> <codeph>192</codeph>  </p> </entry>
<entry><p>This panic is raised when constructing an <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref> or
an <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref> if the specified minimum growth step is less
than or equal to zero or is greater than 65535. </p> </entry>
</row>
<row>
<entry><p> <codeph>193</codeph>  </p> </entry>
<entry><p>This panic is raised when constructing an <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref> or
an <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref> if the specified exponential growth factor is
less than or equal to 1 or is greater than or equal to 128. </p> </entry>
</row>
<row>
<entry><p> <codeph>194</codeph>  </p> </entry>
<entry><p>This panic is raised if code inside an ASSERT_ALWAYS_NO_LEAVE harness
leaves. </p> </entry>
</row>
<row>
<entry><p> <codeph>195</codeph>  </p> </entry>
<entry><p>This panic is raised when the attempt to grow a cell on the heap
fails. </p> </entry>
</row>
<row>
<entry><p> <codeph>196</codeph>  </p> </entry>
<entry><p>This panic is raised when an attempt is made to install a Win32
SE handler that is not on the stack. </p> <p>See the internal class <codeph>TWin32SEHTrap</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>197</codeph>  </p> </entry>
<entry><p>This panic is raised when the caller of an API does not have the
right capabilities to call that API. You need to consult the documentation
for the specific API for the capabilities needed to call it. </p> </entry>
</row>
<row>
<entry><p> <codeph>198</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the internal class <codeph>RHashTableBase</codeph> if
a NULL function pointer is passed in as the hash function. </p> </entry>
</row>
<row>
<entry><p> <codeph>199</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the internal class <codeph>RHashTableBase</codeph> if
a NULL function pointer is passed in as the identity relation. </p> </entry>
</row>
<row>
<entry><p> <codeph>200</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the internal class <codeph>RHashTableBase</codeph> if
a negative element size is specified. </p> </entry>
</row>
<row>
<entry><p> <codeph>201</codeph>  </p> </entry>
<entry><p>This panic is raised by the constructor of the internal class <codeph>RHashTableBase</codeph> if
the specified key offset is inconsistent with the specified element size. </p> </entry>
</row>
<row>
<entry><p> <codeph>202</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>VerifyReform()</codeph> of
the internal class <codeph>RHashTableBase</codeph> if a deleted entry still
remains after a hash table reform. This panic should never occur as it indicates
an error in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>203</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>ConsistencyCheck()</codeph> of
the internal class <codeph>RHashTableBase</codeph>. It indicates an error
in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>204</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>ConsistencyCheck()</codeph> of
the internal class <codeph>RHashTableBase</codeph>. It indicates an error
in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>205</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>ConsistencyCheck()</codeph> of
the internal class <codeph>RHashTableBase</codeph>. It indicates an error
in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>206</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>ConsistencyCheck()</codeph> of
the internal class <codeph>RHashTableBase</codeph>. It indicates an error
in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>207</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>ConsistencyCheck()</codeph> of
the internal class <codeph>RHashTableBase</codeph>. It indicates an error
in the hash table implementation. </p> </entry>
</row>
<row>
<entry><p> <codeph>208</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>Next()</codeph> of
the internal class <codeph>THashTableIterBase</codeph> if, while attempting
to step a hash table iterator to the next entry, the iterator is found to
point to an invalid table entry. This will typically occur if elements have
been removed from the hash table without resetting the iterator. </p> </entry>
</row>
<row>
<entry><p> <codeph>209</codeph>  </p> </entry>
<entry><p>This panic is raised by the member function <codeph>Current()</codeph> of
the internal class <codeph>THashTableIterBase</codeph> if, while interrogating
the current position of a hash table iterator, the iterator is found to point
to an invalid table entry. This will typically occur if elements have been
added to or removed from the hash table without resetting the iterator. </p> </entry>
</row>
<row>
<entry><p> <codeph>210</codeph>  </p> </entry>
<entry><p>This panic is raised if an invalid argument is passed to the <codeph>Reserve()</codeph> function
on any of the hash table classes derived from the internal class <codeph>RHashTableBase</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>211</codeph>  </p> </entry>
<entry><p>This panic is raised if the Win32 SE handler chain has been corrupted. </p> <p>See
the internal class <codeph>TWin32SEHTrap</codeph>. </p> </entry>
</row>
<row>
<entry><p> <codeph>212</codeph>  </p> </entry>
<entry><p>This panic is raised if a negative valued argument is passed to
the <codeph>Reserve()</codeph> member function of the <xref href="GUID-FAEBF321-6B08-3041-A01F-B1E7282D0707.dita"><apiname>RArray</apiname></xref> or <xref href="GUID-AAA13D1F-1BD7-3331-BB8C-11FA2795B53F.dita"><apiname>RPointerArray</apiname></xref> classes
. </p> </entry>
</row>
<row>
<entry><p> <codeph>213</codeph>  </p> </entry>
<entry><p>This panic is raised when attempting to set a new debug failure
mode on a heap with an invalid argument. </p> <p>For example, if <codeph>aBurst
&gt; KMaxTUint6</codeph> when invoking <codeph>__UHEAP_BURSTFAILNEXT</codeph>,
when an RHeap object is used for the user heap. </p> <p>On the user side this
is associated with the USER category. On the kernel side this is associated
with the KERN-HEAP category. </p> </entry>
</row>
<row>
<entry><p> <codeph>214</codeph>  </p> </entry>
<entry><p>This panic is raised when an invalid chunk attribute has been passed
to the method RChunk::Create(). </p> </entry>
</row>
<row>
<entry><p> <codeph>215</codeph>  </p> </entry>
<entry><p>This panic is raised when a <xref href="GUID-51F7DBCF-BFB6-31F9-8882-5D263A1AD4B4.dita"><apiname>TChunkCreateInfo</apiname></xref> object
with an invalid version number has been passed to the method <xref href="GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07.dita#GUID-326A2F4D-0E99-31C0-A35D-E8BF45913F07/GUID-EA7C4105-6D64-3F87-83B6-C97DCDEDB94A"><apiname>RChunk::Create()</apiname></xref>. </p> </entry>
</row>
</tbody>
</tgroup>
</table></conbody></concept>