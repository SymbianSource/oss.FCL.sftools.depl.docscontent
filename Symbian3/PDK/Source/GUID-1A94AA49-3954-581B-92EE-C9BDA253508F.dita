<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-1A94AA49-3954-581B-92EE-C9BDA253508F" xml:lang="en"><title>How
to create a generic array</title><shortdesc>Arrays can be created using a templated class. This allows a degree
of polymorphism to be used without needing to know the data type in the array.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Arrays can be accessed in a limited way using a <codeph>TArray&lt;class T&gt;</codeph> object.
This is a templated class which can be constructed by any of the templated
array classes: <codeph>CArrayFixFlat&lt;class T&gt;</codeph>, <codeph>CArrayFixSeg&lt;class T&gt;</codeph>, <codeph>CArrayVarFlat&lt;class T&gt;</codeph>, <codeph>CArrayVarSeg&lt;class T&gt;</codeph> and <codeph>CArrayPakFlat&lt;class T&gt;</codeph>.</p>
<p>It allows a degree of polymorphism amongst the array classes. It permits
the <codeph>operator[]</codeph> and the <codeph>Count()</codeph> member functions
of an array to be invoked without knowing the type of that array.</p>
</conbody></concept>