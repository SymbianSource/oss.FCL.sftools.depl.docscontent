<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task xml:lang="en" id="GUID-CC5A1C8D-55AA-5FAE-A446-4CBF949C9003"><title>Subscriber Identity Tutorial </title><shortdesc>This tutorial describes how an application gets the subscriber identification information. </shortdesc><prolog><metadata><keywords/></metadata></prolog><taskbody> <steps id="GUID-A43361E3-7EAE-5596-8106-EA99038723D7"> <step id="GUID-A0597AB9-0725-584E-B9CB-6706C52F0802"><cmd/><info>create a new instance of the <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony</apiname></xref>  </info> </step> <step id="GUID-E5DA9A58-763D-5571-80C1-8AA22A1FAD84"><cmd/><info>use <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::GetSubscriberId()</apiname></xref> to get the IMSI number </info> </step> <step id="GUID-C9F1783E-DAB6-58AA-8E26-10C2ABBC822A"><cmd/><info>the function returns the IMSI in a <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::TSubscriberIdV1</apiname></xref> object </info> </step> <step id="GUID-C8C6490B-76A1-5872-B791-EEB3B14FA364"><cmd/><info>pass the enumeration <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::EGetSubscriberIdCancel</apiname></xref> to cancel the asynchronous request. </info> </step> </steps> <example id="GUID-E1CED382-30CE-57DC-8BC3-98F7F2A389DF"><title>Subscriber identity example</title> <codeblock id="GUID-63B55773-65BF-5CE8-919F-E3549CE57B71" xml:space="preserve">#include &lt;e32base.h&gt;
#include &lt;Etel3rdParty.h&gt;

class CClientApp : public CActive
    { 

private:
    CTelephony* iTelephony;
    CTelephony::TSubscriberIdV1 iSubscriberIdV1;
    CTelephony::TSubscriberIdV1Pckg iSubscriberIdV1Pckg;

public:
    CClientApp(CTelephony* aTelephony);
    void SomeFunction();

private:
    /*
       These are the pure virtual methods from CActive that  
       MUST be implemented by all active objects
       */
    void RunL();
    void DoCancel();
    };

CClientApp:: CClientApp(CTelephony* aTelephony)
    : CActive(EPriorityStandard),
      iTelephony(aTelephony),
      iSubscriberIdV1Pckg(iSubscriberIdV1)
    {
    //default constructor
    }

void CClientApp::SomeFunction()
    {
    iTelephony-&gt;GetSubscriberId(iStatus, iSubscriberIdV1Pckg);
    SetActive();
    }

void CClientApp::RunL()
    {
    if(iStatus==KErrNone)
       {
       TBuf&lt;CTelephony::KIMSISize&gt; suscriberId = iSubscriberIdV1.iSubscriberId;
       }
    }

void CClientApp::DoCancel()
    {
    iTelephony-&gt;CancelAsync(CTelephony::EGetSubscriberIdCancel);
    }</codeblock> </example> </taskbody></task>