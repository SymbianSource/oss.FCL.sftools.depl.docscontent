<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-F4F3A37A-AB0C-47B8-A538-C05F1CA73BF3" xml:lang="en"><title>Touch-enabled
vs. touch-optimized</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-5A2B0210-EE1A-4B8F-A714-F7CA1EC2B1EA"> <p>Rather than being
touch-enabled, certain applications can be touch-optimized, that is, designed
primarily for touch screen interaction. When developing applications for a
touch interface, the first question you should ask is: which interactions
benefit the most from touch UI? While physical strokes and gestures allow
for more natural interaction with objects, the fact that one can apply them
does not mean they are appropriate for every situation. </p> <p>There are
a few good tips when designing applications for touch use. First, it is imperative
that design decisions are based on real, considered touch use cases. Secondly,
as touch functions require a fair amount of discovery from the user, it is
good if only very obvious functions are made touch-enabled. </p> <p><b>Why
to use touch</b></p><ul>
<li><p><b>More flexible:</b> Compared to fixed hardware keys, the interface
can change dynamically. This allows for more flexible configurations depending
on the functionality needs, languages, and so on. Thus a very small screen
can change its buttons as needed. Also, with indirect strokes and gestures,
there are numerous possibilities. No use of physical buttons is required.</p><fig id="GUID-63BE4283-7856-4448-9058-99E286C2EA65">
<image href="GUID-EC366CB0-AFC8-4501-867C-4FBD2CFE6235_d0e71938_href.png" scale="60" placement="inline"/>
</fig></li>
<li><p><b>More intuitive:</b> Manipulating objects directly by touching them
is natural and intuitive. Keyboards, mice, trackballs, and other input devices
are not able to convey as much subtlety as touch can. Direct manipulation
can deliver a lot more meaning to controlling a tool. </p></li>
<li><p><b>More fun:</b> One can design a game in which users press a button
and an onscreen avatar swings a tennis racket. But it can be simply more entertaining
to mimic movements physically, and to see the action mirrored on-screen. Strokes
and gestures encourage play and exploration of a system by providing a more
hands-on experience. </p></li>
<li><p><b>More engaging:</b> Through play, users start to engage with the
interface, first by trying it out to see how it works. </p></li>
</ul><p><b>Limitations of touch</b></p><ul>
<li><p><b>Heavy data input:</b> A hardware keyboard is faster for most people
to use when entering a large amount of text or numbers, and applications which
involve heavy data input are not necessarily ideal for touch devices. Virtual
keyboards are adequate, for example, for messaging applications. Consider
utilizing adaptive methods - such as options and selections filtered according
to what is available on the screen or in a list - and pre-filled items, when
possible.</p></li>
<li><p><b>Reliance on the visual:</b> While the Symbian OS provides
tactile feedback capability, some applications can rely heavily on visual
feedback to indicate actions. Allow for scalability, larger buttons and text
sizes, for example, for visually impaired users.</p></li>
<li><p><b>Reliance on the physical: </b>Touch interface can be more demanding
on the physical context than mechanical keys. Tapping a touch screen button
while wearing winter gloves, or with long fingernails can be difficult, for
instance. The inverse is also true: the more subtle and small the movement,
the less likely it is that everyone will be able to do it. To overcome this,
the most basic use cases, such as answering an incoming phone call, must utilize
large enough elements and straightforward interaction.</p></li>
</ul></section>
</conbody></concept>