<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-46C56A16-E548-59B1-88DF-3DAF3FF68751"><title>Bitmap Operations</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>A graphics context also provides bitmap primitives allowing two ways of drawing a bitmap on a graphics device: </p> <ul><li id="GUID-BA95D549-61AF-5D66-B77B-DD929AF10CFA"><p>starting at a certain point, stretched or compressed to its size in twips </p> </li> <li id="GUID-915CE0FE-80FB-55AA-A553-72B418F7D806"><p>stretched or compressed to fit a rectangle of a given size and position </p> </li> </ul> <p>A linear Digital Differential Analyzer (DDA) is used when calculating bitmap stretching and compression. </p> <p>Scaling a bitmap is unavoidably slow, and where possible it is better to use the faster bitmap operations provided by a bitmap graphics context, such as <codeph>CBitmapContext::BitBlt()</codeph>. </p> <p>If the bitmap has to be scaled, consider creating a bitmap to do this off-screen. The scaled bitmap can then be blitted to the screen. </p> <section><title>See also</title> <p><xref href="GUID-A3EBB297-1494-579C-83D5-8FDBBD01B674.dita">How to Draw Bitmaps</xref>  </p> <p><xref href="GUID-294E84BB-65D0-5275-848E-1960B201A371.dita">How to Create and Draw to an Off-Screen Bitmap</xref>  </p> <p><xref href="GUID-25035286-5134-51F6-A3B6-C0DF0E802719.dita">The Linear DDA</xref>  </p> </section> </conbody></concept>