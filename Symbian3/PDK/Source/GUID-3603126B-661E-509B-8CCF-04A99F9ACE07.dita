<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-3603126B-661E-509B-8CCF-04A99F9ACE07" xml:lang="en"><title>HelloWorld: writes “Hello World!” to the console</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-9B04430C-4ACD-4C91-ABA1-FC83264E8F6B"><title>Description</title> <p> <codeph>HelloWorld</codeph> is a very simple piece of code showing how text is written to the
console. All other examples in <filepath>Basics</filepath> and <filepath>System</filepath> use the same technique. </p> <p>The file <filepath>CommonFramework.h</filepath> contains the entry point and all code
necessary to support the example itself, including the construction
of the console and the cleanup stack. Putting code into a <filepath>.h</filepath> file may not be conventional practice, but it is useful
to do so here. </p> </section>
<section id="GUID-9D8D6977-5AEA-400F-B2B6-0603738FD4BC"><title>Download</title> <p>Click on the following link to
download the example: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/zips/guid-9a9bd0dd-017a-4460-b7d8-019616ebfa39.zip" scope="external">HelloWorld.zip</xref></p><p>Download some additional
files required by the example: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/zips/guid-bd05bfa4-e51c-4cf7-b327-646b0b9e814d.zip" scope="external">CommonFramework.zip</xref>.</p><p>Click <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/guid-9a9bd0dd-017a-4460-b7d8-019616ebfa39.html" scope="peer">browse</xref> to view the example code. </p><p>Click <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/guid-bd05bfa4-e51c-4cf7-b327-646b0b9e814d.html" scope="peer">browse</xref> to view the additional file.</p> </section>
<section id="GUID-A2B5A863-F70B-41F2-9377-DD2661996321"><title>Build</title> <p>The example includes the two project
files needed for building: <filepath>bld.inf</filepath> and the <filepath>.mmp</filepath> file. </p> <p>The Symbian platform build process
describes how to build this application, which results in an executable
called: </p> <p> <filepath>\epoc32\release\&lt;target&gt;\&lt;urel
or udeb&gt;\HELLOWORLD.EXE</filepath>. </p> </section>
<section id="GUID-1F313CF4-9A1C-4A36-8DE2-FF2868A58417"><title>Usage</title> <p>Run the executable <filepath>HELLOWORLD.EXE</filepath>. </p> <p>Executables for the emulator targets <filepath>wins</filepath> and <filepath>winscw</filepath> can be run on your PC. Executables
for ARM targets must be copied to your target platform before being
run. </p> </section>
<section id="GUID-4778E674-9FB8-4A55-B6BB-026F721AA23A"><title>Classes used</title> <p>The example shows the use
of the <codeph>_LIT</codeph> macro which is used throughout all of
the examples. The macro generates a: </p> <codeblock id="GUID-FD21D75C-AA23-5F83-9076-2F9CA6F313A8" xml:space="preserve">const static TLitC&lt;TInt&gt;</codeblock> <p>object and is an efficient and convenient way of generating constant
literal text. </p> <p>As this is a wide (Unicode) build, <codeph>TLItC&lt;TInt&gt;</codeph> is a typedef for <codeph>TLitC16&lt;TInt&gt;.</codeph>  </p> </section>
</conbody></concept>