<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-D68E0A64-0E8A-5C52-9C5B-93BA3B80C200" xml:lang="en"><title>Window
Groups and Applications</title><shortdesc>A window group is the basic unit of an application.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p> <b>Variant</b>: Both (ScreenPlay and non-ScreenPlay). <b>Target audience</b>:
Application developers. </p>
<p> The main functions of a window group are: </p>
<ul>
<li id="GUID-7FCE3494-29FA-55D0-B798-825A86230A41"><p>To receive keyboard
focus—unless captured, all key events are sent to the window group that has
keyboard focus. </p> </li>
<li id="GUID-F6CAE40A-72FE-5DC7-8104-173D3AE41BBC"><p>The application that
has keyboard focus is known as the "foreground application". The Window Server
gives the foreground application’s thread extra priority, so that it is responsive
to the user, even if a background application is performing a long-running
task. </p> </li>
<li id="GUID-92F3DF82-02D1-579A-855E-3E9F540B75AF"><p>To control settings
for priority keys and key capture. </p> </li>
<li id="GUID-2760EF21-9193-5F48-9DE0-748BAD2EA9DB"><p>To have an associated
name that can be interrogated by other Window Server clients and used to determine
which applications are running. </p> </li>
<li id="GUID-8CDFDECF-0B23-5BE4-964E-4ABE29F625F2"><p>To have a text cursor.
The text cursor is displayed only for the application with keyboard focus. </p> </li>
<li id="GUID-C184C67F-193B-5498-9537-632B52D53A7A"><p>To form a group for
all other windows owned by an application. </p> </li>
</ul>
<p>A typical application has a single window group, and all its other windows
are descendants of that window group. A system shell application may use the <codeph>RWsSession</codeph> interface
to interrogate all window groups owned by all client applications, and therefore
may display a task list. All applications should use the same policy for the
format of the window group name. This policy is the responsibility of the
GUI, not the Window Server itself. </p>
<p>An <codeph>RWindowGroup</codeph> is a pseudo-window that can never be seen
on screen, but which has an <keyword>ordinal position</keyword> and participates
in parent/child and sibling relationships as all other windows. </p>
</conbody><related-links>
<link href="GUID-99AE1D62-571A-5A63-B472-C0FBC0861F52.dita"><linktext>Window Types</linktext>
</link>
</related-links></concept>