<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-6E4CAA18-635E-5476-8CE4-DCA69C05CC07" xml:lang="en"><title>HybridApp:
Demonstrating P.I.P.S. Hybrid Applications</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>This example shows how to develop P.I.P.S. hybrid applications. The example
uses both pure C and native Symbian C++ APIs. </p>
<section><title>Download</title> <p>Click on the following link to download
the example: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/zips/guid-5a0c76f0-30fe-4695-af85-4dbb6b05e42e.zip" scope="external">HybridApp.zip</xref></p><p>Click: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/guid-5a0c76f0-30fe-4695-af85-4dbb6b05e42e.html" scope="peer">browse</xref> to view the example code. </p> </section>
<section><title>Description</title> <p>This example displays the memory information
of all available drives of the system. As P.I.P.S. APIs cannot be used to
access these drives, native Symbian C++ APIs are used. The <codeph>RFs::Drive()</codeph> and <codeph>RFs::Volume()</codeph> APIs
are used to access the drives and get their memory information. </p> <p>It
displays the drive information by using the standard Input/Output functions
defined in P.I.P.S. libraries. The <codeph>DescToChar()</codeph> function
defined in the example converts the native Symbian descriptor strings to C
strings. As the drive name is stored in a descriptor, the example uses this
function to convert it to a C string. </p> </section>
<section><title>Build</title> <p>The following statements are present in all
the <filepath>.mmp</filepath> files of the example: </p> <codeblock id="GUID-4B6DD4ED-6044-5294-A2A1-91CFCD3FFE31" xml:space="preserve">SYSTEMINCLUDE epoc32\include\stdapis
LIBRARY libc.lib
STATICLIBRARY libcrt0.lib</codeblock> <p> <b>Note:</b> You require these statements
because of the following reasons: </p> <ul>
<li id="GUID-90620295-032C-5057-9D1D-04064322C0A6"><p>The <filepath>epoc32\include\stdapis</filepath> directory
contains header files such as, <filepath>stdio.h</filepath>, <filepath>unistd.h</filepath> and
so on that are required to build an Open Environment application. </p> </li>
<li id="GUID-3CC12EEF-4472-5782-A1F0-81B576B99249"><p>The <filepath>libc.lib</filepath> file
contains the definitions of all functions that are defined in the header files
associated with this example. </p> </li>
<li id="GUID-CADEFC9F-45F6-5E13-8336-6EC6457A102E"><p>The <filepath>libcrt0.lib</filepath> file
provides the <codeph>E32Main()</codeph> function, which is the entry point
for the <codeph>main()</codeph> function of the example. </p> </li>
</ul> <p> <xref href="GUID-3100800B-B2F7-50EF-BD4C-3C345ECCB2A5.dita">The Symbian
OS build process</xref> describes how to build this example. </p> <p>For the
emulator, the example builds an executable file called <filepath>hybridapp.exe</filepath> in
the <filepath>epoc32\release\winscw\&lt;udeb or urel&gt;\</filepath> directory. </p> </section>
</conbody><related-links>
<link href="GUID-38BE7105-309E-5372-98EE-BCA0ADD0ACBA.dita"><linktext>Hybrid Applications</linktext>
</link>
<link href="GUID-79100974-CAE1-5451-9ED7-E06C9B27131B.dita"><linktext>Build Process</linktext>
</link>
</related-links></concept>