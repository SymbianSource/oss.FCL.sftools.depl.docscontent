<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-5CEA46BA-5AA2-51B4-8BBA-5B6EF141D68A" xml:lang="en"><title>Reading
Kernel Trace Data From Chunks Tutorial</title><shortdesc>Explains how to use the kernel trace tool to read data from chunks.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-A56440F7-011B-44ED-94FD-8D42EAFC7F2D"><title>Purpose</title> <p>Trace data is written to kernel side chunks.
The kernel trace tool API can read from the chunks for further processing. </p> </section>
<section id="GUID-44B00A64-2085-47C2-BC31-D3CC6C3C7C76"><title>Intended audience</title><p>This document is intended for
application developers writing a trace tool using the kernel trace tool component. </p> </section>
<section id="GUID-3A5C961C-0F9D-46C1-8157-A3A764295068"><title>Required background</title><p>The trace filters defined in <codeph>EUser</codeph>.
The kernel trace tool component in general. </p></section>
<section id="GUID-57C59F4D-1FD9-4E0F-93A6-AAA604D8F3A8"><title>Introduction</title><p>Reading trace data from chunks is a
short task which is performed in combination with related tasks as explained
in <xref href="GUID-55C05441-33B5-5057-971D-4200345E941E.dita">Kernel Trace Tool
Tutorial</xref>. </p> </section>
<section id="GUID-031CE0D6-8964-46C0-89CB-2988A9550DB8"><title>Using Kernel Trace tool to read trace data from chunks </title> <p>The
following tasks will be covered in this tutorial: </p> <ul>
<li id="GUID-405025C5-2124-5622-B64A-BF00A3564176"><p>Reading trace data from
chunks. </p> </li>
</ul> </section>
<section id="GUID-478C160B-B414-4B3C-9519-FF8773668CC3"><title>Basic procedure</title> <p>The high level steps to reading
trace data from chunks are shown here: </p> <ol id="GUID-2B63F75F-0898-54EF-8460-8E0D6905F4BE">
<li id="GUID-CD67705E-4543-5827-A72A-913E7DBEFD29"><p>Open a communication
channel to kernel side. </p> </li>
<li id="GUID-E51233A3-493D-59AC-9A52-7BC3DE295CF7"><p>Create a data notification
request on the data. </p> </li>
</ol> </section>
<section id="GUID-FEF71EBE-A650-4B1C-AE49-FC98CDD2F10C"><title>Using the API</title> <p>These are the function calls required
to </p> <ol id="GUID-FB3A3B09-C810-5CB7-A93E-49D12130FAB8">
<li id="GUID-1C9976F0-517D-51C1-AC6C-F5C51E9CE666"><p>Call the <xref href="GUID-20D0D10F-3401-3F72-8AF6-DC35F6025DC2.dita"><apiname>Open()</apiname></xref> function
of the <xref href="GUID-9E859841-E8A3-37D5-9A19-BCAA3C700922.dita"><apiname>RBTrace</apiname></xref> object. This opens a communication channel
to the kernel side implementation and makes the buffer accessible. </p> </li>
<li id="GUID-5181A128-AE24-51B0-A69D-9AD6720A50E3"><p>Create a data notification
request which will cause data to be written from the chunks to the buffer. </p> </li>
</ol> </section>
<section id="GUID-06814FB2-52C1-47EE-B410-815544C5C599"><title>See Also</title> <p> <xref href="GUID-7B477BA5-CC5B-56A2-82BC-E1BC0049FECB.dita"> Kernel
Trace Tool Overview</xref>  </p> <p> <xref href="GUID-55C05441-33B5-5057-971D-4200345E941E.dita">Kernel
Trace Tool Tutorial</xref>  </p> </section>
</conbody></concept>