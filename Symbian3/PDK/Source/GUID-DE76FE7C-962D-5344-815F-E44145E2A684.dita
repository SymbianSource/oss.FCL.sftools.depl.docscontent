<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-DE76FE7C-962D-5344-815F-E44145E2A684"><title>Architecture</title><shortdesc>This section describes the architectural relationships of the SAT API. </shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody><p>The SAT API is a telephony system (TSY) extension module that interacts with the telephony server to perform different tasks. Normally the licensees implement the SAT clients and the TSY. </p> <p>The TSY handles the messages between the SAT clients, telephony server and the toolkit application. All the TSY subsessions are derived from <xref href="GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5.dita"><apiname>CTelObject</apiname></xref>. TSY responds with a <xref href="GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5.dita#GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5/GUID-63868B41-D6D5-3A78-8835-55D8A937B717"><apiname>CTelObject::ReqCompleted</apiname></xref> after the completion of a request and returns the handle to the client. Use asynchronous calls and active objects are used to prevent the threads from blocking other threads. </p> <p>The server calls the <xref href="GUID-9C780F5F-49F5-3734-BC31-C2A38CD05FE9.dita"><apiname>ReqModeL()</apiname></xref> to find out the flow control mechanism implemented by the client. The TSY can control the flow when you calling the <xref href="GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5.dita#GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5/GUID-B002E006-82BD-372E-8E44-9E618893094B"><apiname>CTelObject::FlowControlSuspend()</apiname></xref> to stop the flow and <xref href="GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5.dita#GUID-F41ACE2C-0580-3A3C-B727-FC29945054F5/GUID-F1B5E74D-8252-356E-B7E8-3E23B216AD1F"><apiname>CTelObject::FlowControlResume()</apiname></xref> to start a flow explicitly. </p> <fig id="GUID-B4A68C2E-4C7E-5DC6-9148-704DDCB418F6"><title>
          SAT API Components 
        </title> <image href="GUID-7293CFFD-4D5D-58F8-97F9-4906CBEBCC79_d0e50459_href.png" placement="inline"/></fig> <section><title>Description</title> <p><b>SAT engine </b> </p> <p>The SAT client is a plug-in developed by the licensees to implement the toolkit functions. The SAT clients request proactive command notification by using <b>RSat::Notifyxyz</b>, where xyz represents one of the proactive command. </p> <p><b>ETelSat API </b> </p> <p>ETelSat API provides the <xref href="GUID-10B2C9F7-ABBF-33E8-8B89-6D170E21293C.dita"><apiname>RSat</apiname></xref> interface and enables the SAT clients to request for proactive commands and multimedia proactive commands from the SAT application through the TSY. ETelSat API queues the notification request messages and responds to the SAT client when it receives the commands from ICC. It also passes back the response messages from the clients to the ICC. </p> <p><b>TSY </b> </p> <p>The TSYs are usually developed by the licensees and are extension modules to the telephony server. They support the client side functionality by translating the messages to be implemented in the phone </p> <p><b>SAT application </b> </p> <p>One or more SAT applications are stored in the ICC of the mobile device. They SAT application gets started as soon as the ICC is inserted in a SAT enabled phone. Once started, the application waits for request messages from the clients and responds to them accordingly. The SAT application is also responsible for security features like encryption, authentication of the messages between the phone and the network operator. </p> </section> </conbody></concept>