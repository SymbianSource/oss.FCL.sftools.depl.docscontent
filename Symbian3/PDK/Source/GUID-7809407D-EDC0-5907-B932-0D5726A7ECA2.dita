<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-7809407D-EDC0-5907-B932-0D5726A7ECA2" xml:lang="en"><title>Simple
encapsulation of a service provider</title><shortdesc>This document describes how to use derived active object classes
to encapsulate services.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>Some active object classes do not implement a <codeph>RunL()</codeph> function.
Such classes are intended for derivation.</p>
<p>For example, the general purpose <codeph>CTimer</codeph> class provides
encapsulation of the timer services offered by the <codeph>RTimer</codeph> class,
but provides no <codeph>RunL()</codeph> to handle their completion. To use
the <codeph>CTimer</codeph> class, you must derive from it again and provide
a <codeph>RunL()</codeph> function.</p>
<p>Some asynchronous service providers may provide facilities for more than
one request to be outstanding simultaneously. However, a single active object
can only have one request outstanding. If all the facilities of such an asynchronous
service provider must be used in a program, then it must be encapsulated by
more than one active object.</p>
</conbody></concept>