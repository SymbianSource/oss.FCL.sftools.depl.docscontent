<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-06031510-2089-55A1-98A2-9045D1D07E4E"><title>File systems</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>A file system operates within the file server to provide services which deliver the required function to the client API. The <filepath>elocal.fsy</filepath> file system, a core part of the operating system, drives the local mediaâ€”ROM, RAM and CF card. A <keyword>VFAT</keyword> file system is used in each case, which maps directly onto the client API.</p> <p>Other file systems may be implemented, for example to support remote file systems over a network. Such file systems may be installed dynamically without any reboot. They may also be uninstalled dynamically, and so free up resources.</p> <p>Installable file systems must present a Symbian OS native interface for clients, no matter what the interface and specification of the remote file system. This is trivial for Windows, OS/2 and DOS, since Symbian OS maps these directly. For Unix, minor changes such as swapping directory separators between <filepath>/</filepath> and <filepath>\</filepath> are needed. For systems such as IBM's mainframes, and DEC's VMS, more radical mappings are needed, to transform between the remote file system's record-based architecture, and Symbian OS's byte-based architecture.</p> </conbody></concept>