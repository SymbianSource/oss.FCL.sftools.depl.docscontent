<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task xml:lang="en" id="GUID-99F36ADE-EBBF-5EE7-B4C9-A540D4CA1776"><title>Flight Mode Status Tutorial </title><shortdesc>This tutorial describes how to retrieve the flight mode status of the device. </shortdesc><prolog><metadata><keywords/></metadata></prolog><taskbody> <steps id="GUID-C2A1C88C-48FB-5964-9AF6-9F1E1FEBAC0D"> <step id="GUID-56D070D5-04FC-5353-9346-B1362082CB2E"><cmd/><info>create a new instance of <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony</apiname></xref>  </info> </step> <step id="GUID-34A6A05B-4FE9-5BCC-8606-6230AF02510E"><cmd/><info>use <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::GetFlightMode()</apiname></xref> to get the flight mode status of the device </info> <info>The function returns the flight mode status in a <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::TFlightModeV1</apiname></xref> object. </info> </step> <step id="GUID-3E742228-588B-5EAA-9822-F40B8418F3C3"><cmd/><info>pass the enuemeration <xref href="GUID-97D402C8-B4B7-385A-92B3-D3FCC0CA575A.dita"><apiname>CTelephony::EGetFlightModeCancel</apiname></xref> to cancel the asynchronous request. </info> </step> </steps> <example id="GUID-60B27F7D-0EA6-57E4-914A-6AA11731B59C"><title>Flight mode status example</title> <codeblock id="GUID-D0977E82-668B-5755-99AF-538A6E87C052" xml:space="preserve">#include &lt;e32base.h&gt;
#include &lt;Etel3rdParty.h&gt;

class CClientApp : public CActive
    { 

private:
    CTelephony* iTelephony;
    CTelephony::TSubscriberIdV1 iSubscriberIdV1;
    CTelephony::TSubscriberIdV1Pckg iSubscriberIdV1Pckg;

public:
    CClientApp(CTelephony* aTelephony);
    void SomeFunction();

private:
    /*
       These are the pure virtual methods from CActive that  
       MUST be implemented by all active objects
       */
    void RunL();
    void DoCancel();
    };

CClientApp:: CClientApp(CTelephony* aTelephony)
    : CActive(EPriorityStandard),
      iTelephony(aTelephony),
      iSubscriberIdV1Pckg(iSubscriberIdV1)
    {
    //default constructor
    }

void CClientApp::SomeFunction()
    {
    iTelephony-&gt;GetSubscriberId(iStatus, iSubscriberIdV1Pckg);
    SetActive();
    }

void CClientApp::RunL()
    {
    if(iStatus==KErrNone)
       {
       TBuf&lt;CTelephony::KIMSISize&gt; suscriberId = iSubscriberIdV1.iSubscriberId;
       }
    }

void CClientApp::DoCancel()
    {
    iTelephony-&gt;CancelAsync(CTelephony::EGetSubscriberIdCancel);
    }</codeblock> </example> </taskbody></task>