<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-B5696711-C79B-5239-B587-33507BF2B3BE"><title>Supported Zsh Features</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>Zsh has an extensible set of features which are also supported, maintained and used in other operating systems such as Windows®, UNIX® and OSX®. </p> <p>Zsh supports the following features: </p> <ul><li id="GUID-C1CD13F6-9DB0-55CB-A8FF-89159937E133"><p> <b> Configurability </b>: </p> <ul><li id="GUID-12BC7982-B027-5712-83DD-8EB1556B025B"><p>Shell variables: These are variables that are set, stored in the shell and available to shell applications. The <xref href="GUID-CE18D940-FEB9-5678-A3CC-AA8A979AD4DA.dita">set</xref> is a command that creates new shell variables and sets new values for existing shell variables. </p> </li> <li id="GUID-5B71FD16-BF52-5834-8EA8-AA958C0225C6"><p> <codeph>alias</codeph> and <codeph>unalias</codeph>: For more information on these commands refer to the <xref href="GUID-3F577531-9798-537F-8F8B-7CAB0257560C.dita">Zsh Command Syntax</xref> section. </p> </li> <li id="GUID-C03EA78B-6A64-51F1-B598-AEACA2B22A74"><p>Shell functions: These are read in and stored internally. They are executed like a regular command. The following is the syntax for a shell function: </p> <codeblock id="GUID-EC491BC1-732D-5D20-9560-E6694F12E8A1" xml:space="preserve">shell_function1()
{
//definition of the function will go here....
}</codeblock> <p>The syntax for invoking the above function is </p> <codeblock id="GUID-9BE52422-0E5C-5331-A79A-696D6EB2D82E" xml:space="preserve">shell_function1</codeblock> </li> <li id="GUID-D92009C5-4E08-53AD-BFE0-09FE418D20CB"><p>Input files: Zsh supports the execution of commands through script files and these script files can be passed as input to the shell. </p> </li> </ul> </li> <li id="GUID-0FE26D0C-7EB8-5F24-AF53-8B5636539A54"><p> <b> Execution of commands </b>: Zsh supports the execution of both built-in commands and external programs. For further details see the <xref href="GUID-3F577531-9798-537F-8F8B-7CAB0257560C.dita">Zsh Command Syntax</xref> and <xref href="GUID-00FFF2B3-F8E4-5CBF-B031-240D98BB2111.dita">External Programs</xref> sections. </p> </li> <li id="GUID-74F035F8-B321-5028-82BA-FB4A6517EA5C"><p> <b> Redirection </b>: Redirection is a function that allows the standard streams to be re-directed to a specified location. For example, </p> <codeblock id="GUID-C8007670-E926-5DE8-9375-2204F918EF0F" xml:space="preserve">pwd &gt; file1</codeblock> <p>which executes <codeph>pwd</codeph>, placing the output in <codeph>file1</codeph>. </p> </li> <li id="GUID-891A474A-6B64-5368-9DE8-DBDD61F3779E"><p> <b>Piping</b>: The output of one command can be the input to another command without an intermediate file. For example, </p> <codeblock id="GUID-44A31B61-CAF9-572C-BC76-9255C47991DE" xml:space="preserve">cmd1 | cmd2</codeblock> <p>which executes <codeph>cmd1</codeph> and the output of <codeph>cmd1</codeph> will be the input for <codeph>cmd2</codeph>. The character <codeph>|</codeph> is known as a pipe. </p> </li> </ul> <section><title>See also</title> <p> <xref href="GUID-DE099071-8401-5DD0-B72A-672B307463A2.dita">Porting with Zsh</xref>  </p> <p> <xref href="GUID-3F577531-9798-537F-8F8B-7CAB0257560C.dita">Zsh Command Syntax</xref>  </p> </section> </conbody></concept>