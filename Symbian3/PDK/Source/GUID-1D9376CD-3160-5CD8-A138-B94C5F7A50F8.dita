<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-1D9376CD-3160-5CD8-A138-B94C5F7A50F8" xml:lang="en"><title>Using
MUTABLE_CAST macro</title><shortdesc>This topic explains how to cast away the constant of the counter
variable.</shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>In the example code below, the class has a simple const getter function <codeph>Var()</codeph>.
It uses <codeph>MUTABLE_CAST</codeph> to cast away the <codeph>const</codeph> -ness
of the counter variable <codeph>iGetCounter</codeph>, which allows that variable
to be changed.</p>
<codeblock id="GUID-8EA00511-AA50-5401-B13D-D21C4611B22F" xml:space="preserve">class TMutableDemo 
 {
public:
 TMutableDemo(TUint a=0):iVar(a),iGetCounter(0) {};
 TUint Var() const;
 
private:
 TUint iVar;
 __MUTABLE TUint iGetCounter;
 };

TUint TMutableDemo::Var() const 
 {
 MUTABLE_CAST(TMutableDemo*,this)-&gt;iGetCounter++;
 return iVar; 
 }</codeblock>
</conbody></concept>