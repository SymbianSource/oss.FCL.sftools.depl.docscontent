<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-1E87CA7A-9733-58A1-A747-F5F3DE9B64D7" xml:lang="en"><title>ControlFramework:
A UI application with a toolbar</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<section><title>Description</title> <p>This example program creates an application
that uses a single view. It implements the standard classes required by any
application using UI controls. That is, an application, a document, an application
UI and a view. </p> <p>A view is a control (derived from <xref href="GUID-B06F99BD-F032-3B87-AB26-5DD6EBE8C160.dita"><apiname>CCoeControl</apiname></xref>)
that displays the application's data on the screen and handles user input.
The pointer and key input is handled by printing to the screen a description
of the key event, or the x,y coordinates of the pointer event. </p> <p>The
application and document are implemented minimally. The application UI handles
commands by overriding the <xref href="GUID-1185F595-0488-3E93-8D60-6B3A1A3AC32E.dita#GUID-1185F595-0488-3E93-8D60-6B3A1A3AC32E/GUID-D6E5C363-CF39-3E56-B717-57CCEE8DC96F"><apiname>CEikAppUi::HandleCommandL()</apiname></xref> method.
In this example, commands are generated by the toolbar buttons, and are handled
by changing the formatting of the text. The text that is initially displayed
is read from a resource file. </p> </section>
<section><title>Download</title> <p>Click on the following link to download
the example: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/zips/guid-10dbd09f-5242-44c4-b3f3-b62669bd8c53.zip" scope="external">ControlFramework.zip</xref></p><p>Click: <xref href="guid-6013a680-57f9-415b-8851-c4fa63356636/guid-10dbd09f-5242-44c4-b3f3-b62669bd8c53.html" scope="peer">browse</xref> to view the example code. </p> </section>
<section><title>Class Summary</title><p> <xref href="GUID-E36E2F07-09E7-32BC-BB83-14DF9232E7D9.dita"><apiname>CEikApplication</apiname></xref>  </p><p><xref href="GUID-B33A8A56-D1BE-3E3D-B5AC-F644A5C764DB.dita"><apiname>CEikDocument</apiname></xref> </p><p> <xref href="GUID-1185F595-0488-3E93-8D60-6B3A1A3AC32E.dita"><apiname>CEikAppUi</apiname></xref></p><p>  <xref href="GUID-B06F99BD-F032-3B87-AB26-5DD6EBE8C160.dita"><apiname>CCoeControl</apiname></xref>  </p></section>
<section><title>Build</title> <p>The <xref href="GUID-3100800B-B2F7-50EF-BD4C-3C345ECCB2A5.dita">Symbian
OS build process</xref> describes how to build an application. </p> <p>The
ControlFramework example builds an executable called <filepath>ControlFramework.exe</filepath> in
the standard location (<filepath>\epoc32\release\winscw\</filepath> <i>&lt;build_variant&gt;</i> for
CodeWarrior). Either launch the executable itself, or launch the emulator
and then select the ControlFramework application from the Emulator's extras
bar. </p> </section>
<section><title>See also</title> <p> <xref href="GUID-6C16417B-5B37-5310-B59A-750D971AA6D4.dita">Using
UI Control Framework (CONE)</xref>  </p> </section>
</conbody></concept>