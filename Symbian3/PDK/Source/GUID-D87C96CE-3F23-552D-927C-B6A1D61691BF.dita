<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-D87C96CE-3F23-552D-927C-B6A1D61691BF"><title>typeset</title><prolog><metadata><keywords/></metadata></prolog><conbody><p><userinput>typeset [ {+|-}AEFHLRUZafghilprtuxm [n]] [ name[=value] ... ] </userinput> </p> <p>or </p> <p><userinput>typeset -T [ {+|-}LRUZrux ] SCALAR[=value] array [ sep ] </userinput> </p> <p>Set or display attributes and values for shell parameters. </p> <p>A parameter is created for each <codeph>name</codeph> that does not already refer to one. When inside a function, a new parameter is created for every <codeph>name</codeph> (even those that already exist), and is unset again when the function completes. The same rules apply to special shell parameters, which retain their special attributes when made local. </p> <p>For each <codeph>name=value</codeph> assignment, the parameter <codeph>name</codeph> is set to value. Note that arrays currently cannot be assigned in typeset expressions, only scalars and integers. </p> <p>If the shell option <codeph>TYPESET_SILENT</codeph> is not set, for each remaining <codeph>name</codeph> that refers to a parameter that is set, the name and value of the parameter are printed in the form of an assignment. Nothing is printed for newly-created parameters, or when any attribute flags listed below are given along with the <codeph>name</codeph>. Using <codeph>+</codeph> instead of <codeph>-</codeph> to introduce an attribute turns it off. </p> <table id="GUID-E564805D-F2F2-545F-8AE6-910E5287CDB8"><tgroup cols="2"><colspec colname="col0"/><colspec colname="col1"/><thead><row><entry>Option</entry> <entry>Description</entry> </row> </thead> <tbody><row><entry><p> <codeph>-p</codeph>  </p> </entry> <entry><p>The parameters and values are printed in the form of a typeset comand and an assignment (which will be printed separately for arrays and associative arrays), regardless of other flags and options. </p> </entry> </row> <row><entry><p> <codeph>-h</codeph>  </p> </entry> <entry><p>Flag on parameters is respected; no value will be shown for these parameters. </p> </entry> </row> <row><entry><p> <codeph>-T</codeph>  </p> </entry> <entry><p>Two or three arguments must be present (an exception is that zero arguments are allowed to show the list of parameters created in this fashion). The first two are the name of a <codeph>scalar</codeph> and an array parameter (in that order) that will be tied together in the manner of <codeph>$PATH</codeph> and <codeph>$path</codeph>. The optional third argument is a single-character separator which will be used to join the elements of the array to form the <codeph>scalar</codeph>; if absent, a colon is used, as with <codeph>$PATH</codeph> Only the first character of the separator is significant; any remaining characters are ignored. Only the <codeph>scalar</codeph> parameter may be assigned an initial value. Both the <codeph>scalar</codeph> and the array may otherwise be manipulated as normal. If one is unset, the other will automatically be unset too. </p> <p>There is no way of untying the variables without unsetting them, or converting the type of one of them with another typeset command;<codeph>
                +T</codeph> does not work, assigning an array to <codeph>SCALAR</codeph> is an error, and assigning a <codeph>scalar</codeph> to array sets it to be a single-element array. Note that both <codeph>typeset -xT ... </codeph> and <codeph>export -T ...
                </codeph> work, but only the <codeph>scalar</codeph> will be marked for export. Setting the value using the <codeph>scalar</codeph> version causes a split on all separators. </p> </entry> </row> </tbody> </tgroup> </table> <p>The <codeph>-g</codeph> (global flag) is treated specially: it means that any resulting parameter will not be restricted to local scope. Note that this does not necessarily mean that the parameter will be global, as the flag will apply to any existing parameter (even if unset) from an enclosing function. This flag does not affect the parameter after creation, hence it has no effect when listing existing parameters, nor does the flag <codeph>+g</codeph> have any effect except in combination with<codeph> -m</codeph>. </p> <p>If no <codeph>name</codeph> is present, the names and values of all parameters are printed. In this case the attribute flags restrict the display to only those parameters that have the specified attributes, and using <codeph>+</codeph> rather than <codeph>-</codeph> to introduce the flag suppresses printing of the values of parameters when there is no parameter name. Also, if the last option is the word <codeph>+</codeph>, then names are printed but values are not. </p> <p>If the <codeph>-m</codeph> flag is given the <codeph>name</codeph> arguments are taken as patterns (which should be quoted). With no attribute flags, all parameters (or functions with the <codeph>-f</codeph> flag) with matching names are printed (the shell option <codeph>TYPESET_SILENT</codeph> is not used in this case). Note that <codeph>-m</codeph> is ignored if no patterns are given. If the <codeph>+g</codeph> flag is combined with <codeph>-m</codeph>, a new local parameter is created for every matching parameter that is not already local. Otherwise <codeph>-m</codeph> applies all other flags or assignments to the existing parameters. Except when assignments are made with <codeph>name=value</codeph>, using <codeph>+m</codeph> forces the matching parameters to be printed, even inside a function. </p> <p>If no attribute flags are given and either no <codeph>-m</codeph> flag is present or the <codeph>+m</codeph> form was used, each parameter <codeph>name</codeph> printed is preceded by a list of the attributes of that parameter (array, association, exported, integer, readonly). If <codeph>+m</codeph> is used with attribute flags, and all those flags are introduced with <codeph>+</codeph>, the matching parameter names are printed but their values are not. </p> <p>The following options can be specified: </p> <table id="GUID-28640435-554C-5911-9BFB-FF138234E2B3"><tgroup cols="2"><colspec colname="col0"/><colspec colname="col1"/><thead><row><entry>Option</entry> <entry>Description</entry> </row> </thead> <tbody><row><entry><p> <codeph>-A</codeph>  </p> </entry> <entry><p>The names refer to associative array parameters. </p> </entry> </row> <row><entry><p> <codeph>-L</codeph>  </p> </entry> <entry><p>Left justify and remove leading blanks from value. If <codeph>n</codeph> is nonzero, it defines the width of the field; otherwise it is determined by the width of the value of the first assignment. When the parameter is expanded, it is filled on the right with blanks or truncated if necessary to fit the field. Leading zeros are removed if the <codeph>-Z</codeph> flag is also set. </p> </entry> </row> <row><entry><p> <codeph>-R</codeph>  </p> </entry> <entry><p>Right justify and fill with leading blanks. If <codeph>n</codeph> is nonzero if defines the width of the field; otherwise it is determined by the width of the value of the first assignment. When the parameter is expanded, the field is left filled with blanks or truncated from the end. </p> </entry> </row> <row><entry><p> <codeph>-U</codeph>  </p> </entry> <entry><p>For arrays (but not for associative arrays), keep only the first occurrence of each duplicated value. This may also be set for colon-separated special parameters like <codeph>PATH</codeph> or <codeph>FIGNORE</codeph>, etc. This flag has a different meaning when used with <codeph>-f</codeph>. </p> </entry> </row> <row><entry><p> <codeph>-Z</codeph>  </p> </entry> <entry><p>Right justify and fill with leading zeros if the first non-blank character is a digit and the <codeph>-L</codeph> flag has not been set. If <codeph>n</codeph> is nonzero it defines the width of the field; otherwise it is determined by the width of the value of the first assignment. </p> </entry> </row> <row><entry><p> <codeph>-a</codeph>  </p> </entry> <entry><p>The names refer to array parameters. An array parameter may be created this way, but it may not be assigned to in the typeset statement. When displaying, both normal and associative arrays are shown. </p> </entry> </row> <row><entry><p> <codeph>-f</codeph>  </p> </entry> <entry><p>The names refer to functions rather than parameters. No assignments can be made, and the only other valid flags are <codeph>-t</codeph>, <codeph>-u</codeph> and <codeph>-U</codeph>. The flag <codeph>-t </codeph> turns on execution tracing for this function. The <codeph>-u</codeph> and <codeph>-U</codeph> flags cause the function to be marked for autoloading; <codeph>-U</codeph> also causes alias expansion to be suppressed when the function is loaded. The <codeph>fpath</codeph> parameter will be searched to find the function definition when the function is first referenced. </p> </entry> </row> <row><entry><p> <codeph>-h</codeph>  </p> </entry> <entry><p>Hide: only useful for special parameters (those marked <codeph>&lt;S&gt;</codeph>), and for local parameters with the same name as a special parameter, though harmless for others. A special parameter with this attribute will not retain its special effect when made local. Thus after <codeph>typeset -h PATH</codeph>, a function containing <codeph>typeset PATH</codeph> will create an ordinary local parameter without the usual behaviour of <codeph>PATH</codeph>. Alternatively, the local parameter may itself be given this attribute; hence inside a function <codeph>typeset -h PATH</codeph> creates an ordinary local parameter and the special <codeph>PATH</codeph> parameter is not altered in any way. It is also possible to create a local parameter using <codeph>typeset +h special</codeph>, where the local copy of special will retain its special properties regardless of having the <codeph>-h</codeph> attribute. Global special parameters loaded from shell modules (currently those in <codeph>zsh/mapfile</codeph> and <codeph>zsh/parameter</codeph>) are automatically given the <codeph>-h</codeph> attribute to avoid name clashes. </p> </entry> </row> <row><entry><p> <codeph>-H</codeph>  </p> </entry> <entry><p>Hide value: specifies that typeset will not display the value of the parameter when listing parameters; the display for such parameters is always as if the <codeph>+</codeph> flag had been given. Use of the parameter is in other respects normal, and the option does not apply if the parameter is specified by name, or by pattern with the <codeph>-m</codeph> option. This is on by default for the parameters in the <codeph>zsh/parameter</codeph> and <codeph>zsh/mapfile</codeph> modules. Note, however, that unlike the <codeph>-h</codeph> flag this is also useful for non-special parameters. </p> </entry> </row> <row><entry><p> <codeph>-i</codeph>  </p> </entry> <entry><p>Use an internal integer representation. If <codeph>n</codeph> is nonzero it defines the output arithmetic base, otherwise it is determined by the first assignment. </p> </entry> </row> <row><entry><p> <codeph>-E</codeph>  </p> </entry> <entry><p>Use an internal double-precision floating point representation. On output the variable will be converted to scientific notation. If <codeph>n</codeph> is nonzero it defines the number of significant figures to display; the default is ten. </p> </entry> </row> <row><entry><p> <codeph>-F</codeph>  </p> </entry> <entry><p>Use an internal double-precision floating point representation. On output the variable will be converted to fixed-point decimal notation. If <codeph>n</codeph> is nonzero it defines the number of digits to display after the decimal point; the default is ten. </p> </entry> </row> <row><entry><p> <codeph>-l</codeph>  </p> </entry> <entry><p>Convert the result to lower case whenever the parameter is expanded. The value is not converted when assigned. </p> </entry> </row> <row><entry><p> <codeph>-r</codeph>  </p> </entry> <entry><p>The given names are marked readonly. Note that if name is a special parameter, the readonly attribute can be turned on, but cannot then be turned off. </p> </entry> </row> <row><entry><p> <codeph>-t</codeph>  </p> </entry> <entry><p>Tags the named parameters. Tags have no special meaning to the shell. This flag has a different meaning when used with <codeph>-f</codeph>. </p> </entry> </row> <row><entry><p> <codeph>-u</codeph>  </p> </entry> <entry><p>Convert the result to upper case whenever the parameter is expanded. The value is not converted when assigned. This flag has a different meaning when used with <codeph>-f</codeph>. </p> </entry> </row> <row><entry><p> <codeph>-x</codeph>  </p> </entry> <entry><p>Mark for automatic export to the environment of subsequently executed commands. If the option <codeph>GLOBAL_EXPORT</codeph> is set, this implies the option <codeph>-g</codeph>, unless <codeph>+g</codeph> is also explicitly given; in other words the parameter is not made local to the enclosing function. This is for compatibility with previous versions of zsh. </p> </entry> </row> </tbody> </tgroup> </table> </conbody></concept>