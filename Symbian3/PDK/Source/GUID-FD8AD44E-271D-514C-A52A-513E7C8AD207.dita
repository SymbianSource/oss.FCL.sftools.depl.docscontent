<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-FD8AD44E-271D-514C-A52A-513E7C8AD207" xml:lang="en"><title>Debugging Comms</title><shortdesc>This topic provides a summary of help available to debug the components
of Cellular Baseband Services, Communication Framework and Networking Services
modules. </shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>

<p> <b>Note:</b> Before you start to debug, check the Comms software configuration
since some configuration options may help with the task. For more information
see <xref href="GUID-0AC0CBBA-87AD-5F94-8F0D-D13654ABB631.dita">Software Behaviour
in a Debug Environment</xref>. Also, some software problems are caused by
an incorrect configuration. For more information on the configuration options
in Comms, see <xref href="GUID-B93D6BAE-B9B9-5118-92DF-5E566E5BE8EB.dita">Comms
Configuration</xref>. </p>
<p>Textual logging by the Symbian platform Comms software is
the primary means by which Comms software can be debugged. By default, this
textual logging is built into the debug Comms binary files and not into release
binary files. Mobile phone software contains the release versions of the binary
files. To debug the code you must use substituted debug binary files. These
debug binary files may also contain behavioural changes to make errors more
apparent and error tracing easier. These behaviour changes can also mask software
problems that are influenced by differences in timing. For more information
see <xref href="GUID-0EF25CCA-1E6B-5B62-8E77-9A670986C5EF.dita">Textual Logging</xref> and <xref href="GUID-ABE77283-EED8-5A33-B574-3B771EF11086.dita">How to Use ULogger with Comms</xref>. </p>
<p>For more information on debugging using On-target hardware see <xref href="GUID-84C20E6E-C5DF-5346-84A3-2D8C701303C8.dita">On-target
Debugging</xref>. </p>
<p>For more information on debugging specific Comms components see <xref href="GUID-935DF48C-F014-5E2A-8BE6-29B00C4FD31D.dita">Component-Specific
Debugging Help</xref>. </p>
<p>For information on the lower-level aspects of debugging such as the memory
map, process priorities and thread states see <xref href="GUID-26714A57-B6B4-5E81-B512-FB520718482B.dita">Debugging
information</xref>. </p>
<p>The Hooklogger application can be useful in tracking software defects such
as memory leaks, stray signals and non-trapped leaves. For more information
on Hooklogger in general and detecting memory leaks see <xref href="GUID-6A6A6648-6573-5EE4-A191-32B3C207305B.dita">Memory
leak detection</xref> and <xref href="GUID-0AC0CBBA-87AD-5F94-8F0D-D13654ABB631.dita#GUID-0AC0CBBA-87AD-5F94-8F0D-D13654ABB631/GUID-B8A8B315-8C46-551A-B8F6-29BD24F45435">Detecting
Comms memory leaks</xref>. </p>
</conbody></concept>