<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-66ACFC54-5671-5B72-9DBC-A76F7A112D63"><title>Store Streams Overview</title><shortdesc>Provides store streams, stream dictionary, and swizzle. </shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody><section><title>Purpose</title> <p>Provides stream types suitable for use in stores (structured data storage). </p> </section> <section><title>Architectural relationships</title> <p>The Store Streams API is based on the abstract stream types defined by the Streaming API. They are designed to be used in conjunction with the structured data storage defined by the Stores API. </p> </section> <section><title>Description</title> <p>The API has threee key concepts: store streams, stream dictionary, and swizzle. </p> <p><b>Store streams</b> </p> <p>The store streams extends the base stream types defined in the Streaming API, to allow streams to be used in stores. </p> <p>The store streams classes are <xref href="GUID-4FA6EE6C-5B4E-39E0-B888-ABDE19985976.dita"><apiname>RStoreReadStream</apiname></xref> and <xref href="GUID-346D4908-15C7-3F15-945F-D561E774022D.dita"><apiname>RStoreWriteStream</apiname></xref>. </p> <p><b>Stream dictionary</b> </p> <p>A stream dictionary maintains a list of two-way associations between UIDs and stream IDs (<xref href="GUID-1C4D4AFD-85E2-3D5D-B704-D1FA0E5E7DA2.dita"><apiname>TStreamId</apiname></xref>). They are used in the root streams of some stores: from them other streams in the store can be found. </p> <p>The stream dictionary class is <xref href="GUID-C5F2BE2A-6D08-3D89-AB13-6EFF899305CF.dita"><apiname>CStreamDictionary</apiname></xref>. </p> <p><b>Swizzle</b> </p> <p>For large stores, it can be desirable to defer reading some objects from streams into memory. A swizzle is a device for handling a dual representation of an object: </p> <p>if it is not in memory, by the relevant stream ID </p> <p>if in memory, by a pointer </p> <p>Full access is available to the object through the swizzle. </p> <p>Swizzles for non-const objects are provided by the template class <xref href="GUID-D10FA32F-32F7-3488-9AAC-CB95270EA006.dita"><apiname>TSwizzle</apiname></xref>. Swizzles for const objects are provided by the template class <xref href="GUID-760F0DF6-6FC7-3824-80C5-51321A459BED.dita"><apiname>TSwizzleC</apiname></xref>. </p> <p><b>Store map</b> </p> <p>A store map is a table of entries where each entry consists of a swizzle and a stream ID. It is provided by <xref href="GUID-D3E27885-46A1-35C1-97E5-17E4EDF72E56.dita"><apiname>CStoreMap</apiname></xref>. </p> </section> <section><title>See also</title> <p> <xref href="GUID-66ACFC54-5671-5B72-9DBC-A76F7A112D63.dita">Store Streams Overview</xref>  </p> <p> <xref href="GUID-744ACF2C-963B-5E2F-A6B3-220AB899FD23.dita">Streaming Overview</xref>  </p> </section> </conbody></concept>