<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en" id="GUID-A928E956-9800-5277-B0D3-34BBB2707AE1"><title>Stream ID</title><prolog><metadata><keywords/></metadata></prolog><conbody><p>Each stream within a store has a unique identity. This is the stream ID, encapsulated by an instance of the <codeph>TStreamId</codeph> class.</p> <p>Stream IDs can be compared with each other; they can also be externalised and internalised. The ID of one stream can be externalised into another stream, and this lays the foundations for building networks of streams. The <codeph>TStreamId</codeph> class provides <codeph>ExternalizeL()</codeph> and <codeph>InternalizeL()</codeph> functions for this purpose.</p> <p> A stream ID is a 32-bit number. 4 bits are reserved, which means that a store can contain up to 2<sup>28</sup> =256M streams. No guarantees are given about the value of a stream ID. In particular, IDs are not allocated in sequence. Each store format has its own method for allocating IDs, designed to make stream lookup efficient in the context of that store.</p> <p>In the context of a given store, a stream can be opened by specifying its ID.</p> <p>Note that <codeph>KNullStreamId</codeph> is a stream ID that is guaranteed not to exist. As the name suggests, it represents a NULL stream ID.</p> </conbody></concept>