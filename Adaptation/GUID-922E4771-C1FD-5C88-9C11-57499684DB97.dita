<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-922E4771-C1FD-5C88-9C11-57499684DB97" xml:lang="en"><title>SPITOOL</title><prolog><metadata><keywords/></metadata></prolog><conbody>
<p>SPITOOL is a utility for creating static plug-in information (SPI)
files, which contain registration data for ROM-based plug-ins. </p>
<p>The tool is normally invoked by <xref href="GUID-E4447BEF-33D2-5099-BCC1-C72FBB3B0463.dita">BUILDROM</xref>,
though it can be used independently (for example, for test purposes). </p>
<section id="GUID-E67FF051-D423-4DBC-A3AB-24155F7743D3"> </section>
<section id="GUID-C173E1BC-BEDD-5843-B395-2DF6123D5F18"><title>SPITOOL
command syntax</title> <codeblock id="GUID-06FB9E43-C48E-5CCF-862A-1D709DC905AD" xml:space="preserve">spitool [options] files directories</codeblock> <p>The tool creates an SPI file by concatenating the specified input
files, using the options specified. </p> <p>You can specify the input
files by specifying the full path to each file, or by specifying a
directory name, in which case all files from that directory are included. </p> <p> <codeph>options</codeph> can be one or more of the following: </p> <table id="GUID-704075C3-49BD-5305-A2B5-4D8C4523EE48">
<tgroup cols="2"><colspec colname="col0"/><colspec colname="col1"/>
<tbody>
<row>
<entry><p>-t&lt;SPIFileName&gt; </p> </entry>
<entry><p> <codeph>&lt;SPIFileName&gt;</codeph> is the name for the produced
SPI file (e.g. <filepath>ecom.spi</filepath>) </p> </entry>
</row>
<row>
<entry><p>-d&lt;TargetDir&gt; </p> </entry>
<entry><p> <codeph>&lt;TargetDir&gt;</codeph> is the directory where
the SPI file should be created. The directory name should end with
a <codeph>\</codeph>. </p> </entry>
</row>
<row>
<entry><p>-i&lt;Existing&gt; </p> </entry>
<entry><p> <codeph>&lt;Existing&gt;</codeph> is the path of an existing
SPI file to which to concatenate the specified input files. </p> <p>If this option is used, then the specified file is used as a base
for the new output file. The output file will contain the contents
of the existing file with new input files appended. The location of
the output file is still specified using the <codeph>-d</codeph> and <codeph>-t</codeph> options. </p> </entry>
</row>
<row>
<entry><p>-uid[1 | 2 | 3]=&lt;UIDValue&gt; </p> </entry>
<entry><p>Specifies that input files should be filtered by their UID
values. </p> <p>This option can be used multiple times, so a list
of valid UID1 values can be specified, and similarly for UID2 and
UID3 values. The UIDs of each input file are compared with this list,
and if a UID value matches a relevant value in the UID lists, then
that file is included in the SPI file. If the file does not match
any values, it is excluded. </p> <p>Use 1, 2, or 3 in the option keyword
to specify to which of the three UIDs the filter should apply. <codeph>&lt;UIDValue&gt;</codeph> should be a UID value in decimal or hexadecimal
(0x....). </p> </entry>
</row>
<row>
<entry><p>-existinguid[1 | 2 | 3]=&lt;UIDValue&gt; </p> </entry>
<entry><p>Test that files concatenated in an existing SPI file use
the specified UID value. This allows the possibility of checking that
the correct type of files are being concatenated together. </p> <p>Use 1, 2, or 3 in the option to specify to which of the three UIDs
the test should apply. <codeph>&lt;UIDValue&gt;</codeph> should be a
UID value in decimal or hexadecimal (0x....). </p> </entry>
</row>
<row>
<entry><p>-existinguidcrc=&lt;CRCValue&gt; </p> </entry>
<entry><p>Test that files concatenated in an existing SPI file use
the specified CRC checksum value. A file's CRC is generated from all
three of its UIDs. </p> <p> <codeph>&lt;CRCValue&gt;</codeph> should
be a value in decimal or hexadecimal (0x....). </p> </entry>
</row>
<row>
<entry><p>-hide &lt;ResourceFileNames&gt; </p> </entry>
<entry><p>Marks a resource file as hidden in the SPI file. </p> <p>&lt;ResourceFileNames&gt; is a list of resource file names separated
by a space or comma, which need to be marked as hidden in the SPI
file. </p> </entry>
</row>
</tbody>
</tgroup>
</table> </section>
</conbody></concept>