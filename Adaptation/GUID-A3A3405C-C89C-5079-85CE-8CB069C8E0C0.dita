<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2007-2010 Nokia Corporation and/or its subsidiary(-ies) All rights reserved. -->
<!-- This component and the accompanying materials are made available under the terms of the License 
"Eclipse Public License v1.0" which accompanies this distribution, 
and is available at the URL "http://www.eclipse.org/legal/epl-v10.html". -->
<!-- Initial Contributors:
    Nokia Corporation - initial contribution.
Contributors: 
-->
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="GUID-A3A3405C-C89C-5079-85CE-8CB069C8E0C0" xml:lang="en"><title>IIC Client Interface Quickstart</title><shortdesc>This document gives a brief overview of the IIC client
interface API. </shortdesc><prolog><metadata><keywords/></metadata></prolog><conbody>
<section id="GUID-969E5E79-1CCE-45DD-B243-734E446B490A"><title>Purpose</title> <p>The IIC client interface API creates a common interface from
device drivers to serial inter-IC buses (IIC buses). </p> <p><b>Intended
audience</b> </p> <p>This document is intended to be used by device
driver writers. </p> </section>
<section id="GUID-921BEB8B-C943-483D-BB67-15E1042F9F5F"><title>Architectural
relationship</title> <p>The IIC client interface API is part of a
group of APIs which provide a common, hardware-independent, interface
from kernel to different hardware. Other APIs of this type include
GPIO.</p> <p><b>Description</b> </p> <p>Physically, a bus represented
by IIC is accessed over a node. The IIC client interface API wraps
a node in a software construct called a channel. It provides functionality
for creating and accessing channels directly. There are two possible
modes of operation:</p><ul>
<li><p>Controller</p><p>Where the device drivers that use the IIC
client interface API can access different IIC channels.</p></li>
<li><p>Controller-less</p><p>Where the channels that the device driver
can access are set at compile time.</p></li>
</ul><p>Furthermore, there are three possible channel behaviors: </p><ul>
<li><p>Master</p><p>The device driver initializes the data transfer.</p></li>
<li><p>Slave</p><p>The device driver carries out a data transfer that
is controlled by another node attached to the bus.</p></li>
<li><p>MasterSlave</p><p>The device driver can carry out both roles.</p></li>
</ul> </section>
<section id="GUID-0F84B972-8260-4373-9F1F-F068AA356F4F"><title>IIC
classes</title> <p>If the access to the IIC bus is to be via a controller,
then the IIC platform service API class to use is:</p><ul>
<li id="GUID-3D3B2AFB-4451-5FCD-98B7-7090DD2D9943"><p> <xref href="GUID-69949E47-8FDF-3651-BEEF-43726EBEB5FF.dita"><apiname>IicBus</apiname></xref>  </p> </li>
</ul> <p>If the access to the IIC bus is to be without a controller
(controller-less operation), then the IIC platform service API classes
to use are:</p><ul>
<li id="GUID-209C4026-156C-5887-AA8C-98C378E04558"><p> <xref href="GUID-FA3881ED-B736-34EB-8F1F-026BE1602B1B.dita"><apiname>DIicBusChannelMaster</apiname></xref>  </p> </li>
<li id="GUID-9D8474E8-9274-5602-AC32-C040BF6EE15D"><p> <xref href="GUID-22FF70C1-A805-3EBB-B142-15FD16D00837.dita"><apiname>DIicBusChannelSlave</apiname></xref>  </p> </li>
<li><p><xref href="GUID-26DBC836-03F1-31C4-BBFF-1F406E2BAEDB.dita"><apiname>DIicBusChannelMasterSlave</apiname></xref></p></li>
</ul> </section>
</conbody><related-links>
<link href="GUID-9986DCC6-EE73-59FB-BDAC-9B09DC64FBCE.dita"><linktext>Client
of Master Channel Tutorial</linktext></link>
<link href="GUID-F461CBB3-F8D1-5961-AD51-5741143A1CB1.dita"><linktext>Client
of Slave Channel Tutorial</linktext></link>
</related-links></concept>